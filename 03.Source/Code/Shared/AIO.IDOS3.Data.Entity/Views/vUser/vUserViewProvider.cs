// ===================================================================================
// Author        : System
// Created date  : 09 Aug 2020 15:54:51
// Description   : vUserViewProvider partial class.
//
// Modified by   :
// Modified date :
// Comments      :
//
// NOTE: This file is initially generated by system and can be modified following
//       the requirement.
// ===================================================================================

using System;
using System.Threading.Tasks;
using Wismapi.Data.Entity;

namespace AIO.IDOS3.Data.Entity
{

    public partial class vUserViewProvider : DataViewProvider<vUser>
    {

        #region Methods
        
        protected override void OnInsertData(vUser obj, bool useTransaction) { OnInsertDataAsync(obj, useTransaction).Wait(); }
        protected override void OnUpdateData(vUser obj, bool useTransaction) { OnUpdateDataAsync(obj, useTransaction).Wait(); }
        protected override void OnDeleteData(vUser obj, bool useTransaction) { OnDeleteDataAsync(obj, useTransaction).Wait(); }


        protected override async Task OnInsertDataAsync(vUser obj, bool useTransaction)
        {
            var userTableProvider = DbContext.GetDataTableProvider<UserTableProvider>();

            var user = new User();

            user.Name = obj.Name;
            user.Password = obj.Password;
            user.IsHeadOffice = obj.IsHeadOffice;
            user.SiteID = obj.SiteID;
            user.StatusID = obj.StatusID;

            await userTableProvider.InsertDataAsync(user);
            obj.ID = user.ID;
        }

        protected override async Task OnUpdateDataAsync(vUser obj, bool useTransaction)
        {
            var userTableProvider = DbContext.GetDataTableProvider<UserTableProvider>();

            var user = await userTableProvider.GetDataAsync(obj.ID);

            user.Name = obj.Name;
            user.Password = obj.Password;
            user.IsHeadOffice = obj.IsHeadOffice;
            user.SiteID = obj.SiteID;
            user.StatusID = obj.StatusID;

            await userTableProvider.UpdateDataAsync(user);
        }

        protected override async Task OnDeleteDataAsync(vUser obj, bool useTransaction)
        {
            if (ValidateDelete(obj))
            {
                var userTableProvider = DbContext.GetDataTableProvider<UserTableProvider>();
                
                var user = await userTableProvider.GetDataAsync(obj.ID);

                user.IsDeleted = true;

                await userTableProvider.UpdateDataAsync(user);
            }
        }



        private bool ValidateDelete(vUser obj)
        {
            // Check dependency to other tables here

            return true;
        }

        #endregion

    }

}
