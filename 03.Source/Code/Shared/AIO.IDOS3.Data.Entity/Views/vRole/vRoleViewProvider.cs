// ===================================================================================
// Author        : System
// Created date  : 09 Aug 2020 15:54:24
// Description   : vRoleViewProvider partial class.
//
// Modified by   :
// Modified date :
// Comments      :
//
// NOTE: This file is initially generated by system and can be modified following
//       the requirement.
// ===================================================================================

using System;
using System.Threading.Tasks;
using Wismapi.Data.Entity;

namespace AIO.IDOS3.Data.Entity
{

    public partial class vRoleViewProvider : DataViewProvider<vRole>
    {

        #region Methods
        
        protected override void OnInsertData(vRole obj, bool useTransaction) { OnInsertDataAsync(obj, useTransaction).Wait(); }
        protected override void OnUpdateData(vRole obj, bool useTransaction) { OnUpdateDataAsync(obj, useTransaction).Wait(); }
        protected override void OnDeleteData(vRole obj, bool useTransaction) { OnDeleteDataAsync(obj, useTransaction).Wait(); }


        protected override async Task OnInsertDataAsync(vRole obj, bool useTransaction)
        {
            var roleTableProvider = DbContext.GetDataTableProvider<RoleTableProvider>();

            var role = new Role();

            role.Name = obj.Name;
            role.Description = obj.Description;
            role.StatusID = obj.StatusID;

            await roleTableProvider.InsertDataAsync(role);
            obj.ID = role.ID;
        }

        protected override async Task OnUpdateDataAsync(vRole obj, bool useTransaction)
        {
            var roleTableProvider = DbContext.GetDataTableProvider<RoleTableProvider>();

            var role = await roleTableProvider.GetDataAsync(obj.ID);

            role.Name = obj.Name;
            role.Description = obj.Description;
            role.StatusID = obj.StatusID;

            await roleTableProvider.UpdateDataAsync(role);
        }

        protected override async Task OnDeleteDataAsync(vRole obj, bool useTransaction)
        {
            if (ValidateDelete(obj))
            {
                var roleTableProvider = DbContext.GetDataTableProvider<RoleTableProvider>();
                
                var role = await roleTableProvider.GetDataAsync(obj.ID);

                role.IsDeleted = true;

                await roleTableProvider.UpdateDataAsync(role);
            }
        }



        private bool ValidateDelete(vRole obj)
        {
            // Check dependency to other tables here

            return true;
        }

        #endregion

    }

}
