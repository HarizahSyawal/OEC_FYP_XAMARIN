// ===================================================================================
// Author        : System
// Created date  : 09 Aug 2020 15:54:51
// Description   : vUserNotificationViewProvider partial class.
//
// Modified by   :
// Modified date :
// Comments      :
//
// NOTE: This file is initially generated by system and can be modified following
//       the requirement.
// ===================================================================================

using System;
using System.Threading.Tasks;
using Wismapi.Data.Entity;

namespace AIO.IDOS3.Data.Entity
{

    public partial class vUserNotificationViewProvider : DataViewProvider<vUserNotification>
    {

        #region Methods
        
        protected override void OnInsertData(vUserNotification obj, bool useTransaction) { OnInsertDataAsync(obj, useTransaction).Wait(); }
        protected override void OnUpdateData(vUserNotification obj, bool useTransaction) { OnUpdateDataAsync(obj, useTransaction).Wait(); }
        protected override void OnDeleteData(vUserNotification obj, bool useTransaction) { OnDeleteDataAsync(obj, useTransaction).Wait(); }


        protected override async Task OnInsertDataAsync(vUserNotification obj, bool useTransaction)
        {
            var userNotificationTableProvider = DbContext.GetDataTableProvider<UserNotificationTableProvider>();

            var userNotification = new UserNotification();

            userNotification.ID = obj.ID;
            userNotification.RaisedDate = obj.RaisedDate;
            userNotification.UserID = obj.UserID;
            userNotification.CategoryID = obj.CategoryID;
            userNotification.HtmlMessage = obj.HtmlMessage;
            userNotification.IsRead = obj.IsRead;

            await userNotificationTableProvider.InsertDataAsync(userNotification);
        }

        protected override async Task OnUpdateDataAsync(vUserNotification obj, bool useTransaction)
        {
            var userNotificationTableProvider = DbContext.GetDataTableProvider<UserNotificationTableProvider>();

            var userNotification = await userNotificationTableProvider.GetDataAsync(obj.ID);

            userNotification.RaisedDate = obj.RaisedDate;
            userNotification.UserID = obj.UserID;
            userNotification.CategoryID = obj.CategoryID;
            userNotification.HtmlMessage = obj.HtmlMessage;
            userNotification.IsRead = obj.IsRead;

            await userNotificationTableProvider.UpdateDataAsync(userNotification);
        }

        protected override async Task OnDeleteDataAsync(vUserNotification obj, bool useTransaction)
        {
            await Task.CompletedTask;
            throw new NotImplementedException();
        }

        #endregion

    }

}
