// ===================================================================================
// Author        : System
// Created date  : 15 Sep 2020 05:28:59
// Description   : mvDiscountGroupProductSyncProvider partial class.
//
// Modified by   :
// Modified date :
// Comments      :
//
// NOTE: This file is initially generated by system and can be modified following
//       the requirement.
// ===================================================================================

using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;
using Wismapi.Data.Entity;

namespace AIO.IDOS3.Mobile.Data.Entity
{

    public partial class mvDiscountGroupProductSyncProvider : DataSyncProvider<mvDiscountGroupProduct>
    {

        #region Properties
        
        public static string Selector = "DiscountGroupID,ProductID,ProductBrandID,DiscountStrata1ID,DiscountStrata1ValidDateFrom,DiscountStrata1ValidDateTo,DiscountStrata2ID,DiscountStrata2ValidDateFrom,DiscountStrata2ValidDateTo,DiscountStrata3ID,DiscountStrata3ValidDateFrom,DiscountStrata3ValidDateTo,DiscountStrata4ID,DiscountStrata4ValidDateFrom,DiscountStrata4ValidDateTo,DiscountStrata5ID,DiscountStrata5ValidDateFrom,DiscountStrata5ValidDateTo,SpecialDiscountStrata1ID,SpecialDiscountStrata1ValidDateFrom,SpecialDiscountStrata1ValidDateTo,SpecialDiscountStrata2ID,SpecialDiscountStrata2ValidDateFrom,SpecialDiscountStrata2ValidDateTo,SpecialDiscountStrata3ID,SpecialDiscountStrata3ValidDateFrom,SpecialDiscountStrata3ValidDateTo,SpecialDiscountStrata4ID,SpecialDiscountStrata4ValidDateFrom,SpecialDiscountStrata4ValidDateTo,SpecialDiscountStrata5ID,SpecialDiscountStrata5ValidDateFrom,SpecialDiscountStrata5ValidDateTo";

        #endregion

        #region Methods

        private async Task<Expression<Func<mvDiscountGroupProduct, bool>>> GetFilter()
        {
            var discountGroupIDs = await DbContext.GetDataTableProvider<mvDiscountGroupTableProvider>().GetData().Select(p => p.ID).Distinct().ToListAsync();

            Expression filter = null;
            var type = typeof(mvDiscountGroupProduct);
            var param = Expression.Parameter(type, "param");

            var propID = Expression.Property(param, "DiscountGroupID");
            foreach (var id in discountGroupIDs)
            {
                var expr = Expression.MakeBinary(ExpressionType.Equal, propID, Expression.Constant(id, type.GetProperty("DiscountGroupID").PropertyType));
                filter = (filter == null) ? expr : Expression.MakeBinary(ExpressionType.Or, filter, expr);
            }

            return Expression.Lambda<Func<mvDiscountGroupProduct, bool>>(filter, param);
        }



        protected override Exception OnDownloadAllData(bool continueOnError) { return OnDownloadAllDataAsync(continueOnError).Result; }
        protected override Exception OnUploadAllData(bool continueOnError) { return OnUploadAllDataAsync(continueOnError).Result; }
        protected override Exception OnDownloadData(mvDiscountGroupProduct obj, bool useTransaction) { return OnDownloadDataAsync(obj, useTransaction).Result; }
        protected override Exception OnUploadData(mvDiscountGroupProduct obj, bool useTransaction) { return OnUploadDataAsync(obj, useTransaction).Result; }


        protected override async Task<Exception> OnDownloadAllDataAsync(bool continueOnError)
        {
            Exception exception = null;

            var discountGroupProductTableProvider = DbContext.GetDataTableProvider<mvDiscountGroupProductTableProvider>();
            var discountGroupProductServiceProvider = DataServiceContext.GetDataServiceProvider<mvDiscountGroupProductServiceProvider>();

            DateTime? syncDate = null;

            List<mvDiscountGroupProduct> serverDataList = null;

            var minSyncDate = (DateTimeOffset?)await discountGroupProductTableProvider.GetData().MinAsync(p => p.SyncDate);

            for (int i = 0; i < DbContext.SyncMaxAttempts; i++)
            {
                try
                {
                    if (!syncDate.HasValue) syncDate = await DataServiceContext.GetDatabaseServerUtcDateTimeAsync();

                    var query = discountGroupProductServiceProvider.GetData().AddQueryOption("$select", Selector).Where(await GetFilter());

                    serverDataList = query.ToList();
                    break;
                }
                catch (Exception ex)
                {
                    if (i == (DbContext.SyncMaxAttempts - 1)) exception = ex;
                    else await Task.Delay(DbContext.SyncAttemptDelay);
                }
            }

            if (serverDataList != null)
            {
                int index = 0;
                foreach (var serverData in serverDataList)
                {
                    try
                    {
                        await ProcessLocalData(syncDate, 1, 1, serverData, null, discountGroupProductTableProvider, true);
                    }
                    catch (Exception ex)
                    {
                        if (!continueOnError)
                        {
                            exception = ex;
                            break;
                        }
                    }

                    index++;
                }
                
                await DbContext.UpdateAllSyncDateAsync<mvDiscountGroupProduct>(syncDate.Value);
            }

            return exception;
        }
        
        protected override async Task<Exception> OnUploadAllDataAsync(bool continueOnError)
        {
            Exception exception = new NotImplementedException();

            return await Task.FromResult(exception);
        }


        protected override async Task<Exception> OnDownloadDataAsync(mvDiscountGroupProduct obj, bool useTransaction)
        {
            Exception exception = null;

            var discountGroupProductTableProvider = DbContext.GetDataTableProvider<mvDiscountGroupProductTableProvider>();
            var discountGroupProductServiceProvider = DataServiceContext.GetDataServiceProvider<mvDiscountGroupProductServiceProvider>();

            DateTime? syncDate = null;
            int status = 1;
            int attempts = 0;

            mvDiscountGroupProduct serverData = null;

            for (int i = 0; i < DbContext.SyncMaxAttempts; i++)
            {
                try
                {
                    if (!syncDate.HasValue) syncDate = await DataServiceContext.GetDatabaseServerUtcDateTimeAsync();

                    serverData = discountGroupProductServiceProvider.GetData().AddQueryOption("$select", Selector)
                        .Where(p => p.DiscountGroupID.Equals(serverData.DiscountGroupID)&& p.ProductID.Equals(serverData.ProductID)).SingleOrDefault();
                    break;
                }
                catch (Exception ex)
                {
                    if (i == (DbContext.SyncMaxAttempts - 1)) { exception = ex; status = 0; }
                    else await Task.Delay(DbContext.SyncAttemptDelay);
                }
            }

            await ProcessLocalData(syncDate, status, attempts, serverData, obj, discountGroupProductTableProvider, useTransaction);

            return exception;
        }

        protected override async Task<Exception> OnUploadDataAsync(mvDiscountGroupProduct obj, bool useTransaction)
        {
            Exception exception = new NotImplementedException();

            return await Task.FromResult(exception);
        }



        private async Task ProcessLocalData(DateTime? syncDate, int status, int attempts, mvDiscountGroupProduct serverData, mvDiscountGroupProduct obj,
            mvDiscountGroupProductTableProvider tableProvider, bool useTransaction)
        {
            var localDate = (syncDate.HasValue) ? syncDate.Value : await DbContext.GetDatabaseUtcDateTimeAsync();
            mvDiscountGroupProduct discountGroupProduct = null;

            if (serverData == null)
            {
                discountGroupProduct = new mvDiscountGroupProduct();
                discountGroupProduct.DiscountGroupID = obj.DiscountGroupID;
                discountGroupProduct.ProductID = obj.ProductID;

                await tableProvider.DeleteDataAsync(discountGroupProduct, useTransaction);
            }
            else
            {
                var isInsert = false;
                discountGroupProduct = await tableProvider.GetDataAsync(serverData.DiscountGroupID, serverData.ProductID);
                if (discountGroupProduct == null)
                {
                    isInsert = true;
                    discountGroupProduct = new mvDiscountGroupProduct();
                }                

                discountGroupProduct.CopyFrom(serverData);
                DbContext.SetSyncData(discountGroupProduct, syncDate, localDate, status, attempts);

                if (isInsert)
                    await tableProvider.InsertDataAsync(discountGroupProduct, useTransaction);
                else
                    await tableProvider.UpdateDataAsync(discountGroupProduct, useTransaction);

                if (obj != null)
                {
                    obj.CopyFrom(serverData);
                    DbContext.CopySyncData(obj, discountGroupProduct);
                }
            }
        }

        #endregion

    }

}
