// ===================================================================================
// Author        : System
// Created date  : 09 Aug 2020 16:32:37
// Description   : mvPaymentCollectionTableProvider partial class.
//
// Modified by   :
// Modified date :
// Comments      :
//
// NOTE: This file is initially generated by system and can be modified following
//       the requirement.
// ===================================================================================

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Wismapi.Data;
using Wismapi.Data.Entity;

namespace AIO.IDOS3.Mobile.Data.Entity
{

    public partial class mvPaymentCollectionTableProvider : DataTableProvider<mvPaymentCollection>
    {
        
        #region Methods

        protected override async Task OnEndInsertDataAsync(EndOperationDataEventArgs<mvPaymentCollection> e)
        {
            if (!e.IsError)
            {
                if (e.Data.ChildDetails != null)
                {
                    var childTableProvider = DbContext.GetDataTableProvider<mvPaymentCollectionDetailsTableProvider>();

                    await InsertChilds(childTableProvider, e.Data.DocumentID, e.Data.ChildDetails, e.UseTransaction);
                }                
            }

            await base.OnEndInsertDataAsync(e);
        }

        protected override async Task OnEndUpdateDataAsync(EndOperationDataEventArgs<mvPaymentCollection> e)
        {
            if (!e.IsError)
            {
                if (e.Data.ChildDetails != null)
                {
                    var childTableProvider = DbContext.GetDataTableProvider<mvPaymentCollectionDetailsTableProvider>();

                    await DeleteChilds(childTableProvider, e.Data.DocumentID, e.UseTransaction);
                    await InsertChilds(childTableProvider, e.Data.DocumentID, e.Data.ChildDetails, e.UseTransaction);
                }
            }

            await base.OnEndUpdateDataAsync(e);
        }

        protected override async Task OnBeginDeleteDataAsync(BeginOperationDataEventArgs<mvPaymentCollection> e)
        {
            var childTableProvider = DbContext.GetDataTableProvider<mvPaymentCollectionDetailsTableProvider>();

            await DeleteChilds(childTableProvider, e.Data.DocumentID, e.UseTransaction);

            await base.OnBeginDeleteDataAsync(e);
        }



        private async Task InsertChilds(mvPaymentCollectionDetailsTableProvider childTableProvider, Guid documentID, ICollection<mvPaymentCollectionDetails> childs, bool useTransaction)
        {
            foreach (var child in childs)
            {
                child.DocumentID = documentID;
                await childTableProvider.InsertDataAsync(child, useTransaction);
            }                
        }

        private async Task DeleteChilds(mvPaymentCollectionDetailsTableProvider childTableProvider, Guid documentID, bool useTransaction)
        {
            var deleteChilds = childTableProvider.GetDataByDocumentID(documentID);
            foreach (var child in deleteChilds)                
                await childTableProvider.DeleteDataAsync(child, useTransaction);
        }

        #endregion

    }

}
