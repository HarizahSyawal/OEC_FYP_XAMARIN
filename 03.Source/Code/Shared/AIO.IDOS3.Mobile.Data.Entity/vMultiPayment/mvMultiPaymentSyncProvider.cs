// ===================================================================================
// Author        : System
// Created date  : 08 Oct 2020 05:23:03
// Description   : mvMultiPaymentSyncProvider partial class.
//
// Modified by   :
// Modified date :
// Comments      :
//
// NOTE: This file is initially generated by system and can be modified following
//       the requirement.
// ===================================================================================

using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;
using Wismapi.Data.Entity;

namespace AIO.IDOS3.Mobile.Data.Entity
{

    public partial class mvMultiPaymentSyncProvider : DataSyncProvider<mvMultiPayment>
    {

        #region Properties
        
        public static string Selector = "ID,Code,Name,MultiPayment,TypeID,TypeName,IncomingAccountID,StatusID,StatusName,CreatedDate,ModifiedDate,IsDeleted";
        
        #endregion
        
        #region Methods
        
        private async Task<Expression<Func<mvMultiPayment, bool>>> GetFilter()
        {
            var incomingAccountIDs = await DbContext.GetDataTableProvider<mvIncomingAccountTableProvider>().GetData().Select(p => p.ID).ToListAsync();

            Expression filter = null;
            var type = typeof(mvMultiPayment);
            var param = Expression.Parameter(type, "param");

            var propIncomingAccountID = Expression.Property(param, "IncomingAccountID");
            foreach (var id in incomingAccountIDs)
            {
                var expr = Expression.MakeBinary(ExpressionType.Equal, propIncomingAccountID, Expression.Constant(id, type.GetProperty("IncomingAccountID").PropertyType));
                filter = (filter == null) ? expr : Expression.MakeBinary(ExpressionType.Or, filter, expr);
            }

            return Expression.Lambda<Func<mvMultiPayment, bool>>(filter, param);
        }
        
        
        
        protected override Exception OnDownloadAllData(bool continueOnError) { return OnDownloadAllDataAsync(continueOnError).Result; }
        protected override Exception OnUploadAllData(bool continueOnError) { return OnUploadAllDataAsync(continueOnError).Result; }
        protected override Exception OnDownloadData(mvMultiPayment obj, bool useTransaction) { return OnDownloadDataAsync(obj, useTransaction).Result; }
        protected override Exception OnUploadData(mvMultiPayment obj, bool useTransaction) { return OnUploadDataAsync(obj, useTransaction).Result; }


        protected override async Task<Exception> OnDownloadAllDataAsync(bool continueOnError)
        {
            Exception exception = null;

            var multiPaymentTableProvider = DbContext.GetDataTableProvider<mvMultiPaymentTableProvider>();
            var multiPaymentServiceProvider = DataServiceContext.GetDataServiceProvider<mvMultiPaymentServiceProvider>();

            DateTime? syncDate = null;

            List<mvMultiPayment> serverDataList = null;

            var minSyncDate = (DateTimeOffset?)await multiPaymentTableProvider.GetData().MinAsync(p => p.SyncDate);

            for (int i = 0; i < DbContext.SyncMaxAttempts; i++)
            {
                try
                {
                    if (!syncDate.HasValue) syncDate = await DataServiceContext.GetDatabaseServerUtcDateTimeAsync();

                    var query = multiPaymentServiceProvider.GetData().AddQueryOption("$select", Selector).Where(await GetFilter());

                    if (minSyncDate.HasValue)
                        query = query.Where(p => (p.CreatedDate > minSyncDate.Value) || ((p.ModifiedDate != null) && (p.ModifiedDate.Value > minSyncDate.Value)));
                        
                    serverDataList = query.ToList();
                    break;
                }
                catch (Exception ex)
                {
                    if (i == (DbContext.SyncMaxAttempts - 1)) exception = ex;
                    else await Task.Delay(DbContext.SyncAttemptDelay);
                }
            }

            if (serverDataList != null)
            {
                if (serverDataList.Count > 0)
                {
                    var incomingAccounts = await DbContext.GetDataTableProvider<mvIncomingAccountTableProvider>().GetData().ToListAsync();

                    int index = 0;
                    foreach (var serverData in serverDataList)
                    {
                        try
                        {
                            var incomingAccount = incomingAccounts.Where(p => p.ID.Equals(serverData.IncomingAccountID)).SingleOrDefault();

                            AssignFromLocalData(serverData, incomingAccount);

                            await ProcessLocalData(syncDate, 1, 1, serverData, null, multiPaymentTableProvider, true);
                        }
                        catch (Exception ex)
                        {
                            if (!continueOnError)
                            {
                                exception = ex;
                                break;
                            }
                        }

                        index++;
                    }
                }
                
                await DbContext.UpdateAllSyncDateAsync<mvMultiPayment>(syncDate.Value);
            }

            return exception;
        }
        
        protected override async Task<Exception> OnUploadAllDataAsync(bool continueOnError)
        {
            Exception exception = new NotImplementedException();

            return await Task.FromResult(exception);
        }


        protected override async Task<Exception> OnDownloadDataAsync(mvMultiPayment obj, bool useTransaction)
        {
            Exception exception = null;

            var multiPaymentTableProvider = DbContext.GetDataTableProvider<mvMultiPaymentTableProvider>();
            var multiPaymentServiceProvider = DataServiceContext.GetDataServiceProvider<mvMultiPaymentServiceProvider>();

            DateTime? syncDate = null;
            int status = 1;
            int attempts = 0;

            mvMultiPayment serverData = null;

            for (int i = 0; i < DbContext.SyncMaxAttempts; i++)
            {
                try
                {
                    if (!syncDate.HasValue) syncDate = await DataServiceContext.GetDatabaseServerUtcDateTimeAsync();

                    serverData = multiPaymentServiceProvider.GetData().AddQueryOption("$select", Selector)
                        .Where(p => (p.Code.ToLower() == obj.Code.ToLower())).SingleOrDefault();
                    break;
                }
                catch (Exception ex)
                {
                    if (i == (DbContext.SyncMaxAttempts - 1)) { exception = ex; status = 0; }
                    else await Task.Delay(DbContext.SyncAttemptDelay);
                }
            }

            if (serverData != null)
            {
                var incomingAccount = await DbContext.GetDataTableProvider<mvIncomingAccountTableProvider>().GetDataAsync(serverData.IncomingAccountID);

                AssignFromLocalData(serverData, incomingAccount);
            }

            await ProcessLocalData(syncDate, status, attempts, serverData, obj, multiPaymentTableProvider, useTransaction);

            return exception;
        }

        protected override async Task<Exception> OnUploadDataAsync(mvMultiPayment obj, bool useTransaction)
        {
            Exception exception = new NotImplementedException();

            return await Task.FromResult(exception);
        }



        private async Task ProcessLocalData(DateTime? syncDate, int status, int attempts, mvMultiPayment serverData, mvMultiPayment obj,
            mvMultiPaymentTableProvider tableProvider, bool useTransaction)
        {
            var localDate = (syncDate.HasValue) ? syncDate.Value : await DbContext.GetDatabaseUtcDateTimeAsync();
            mvMultiPayment multiPayment = null;

            if (serverData == null)
            {
                multiPayment = new mvMultiPayment();
                multiPayment.ID = obj.ID;

                await tableProvider.DeleteDataAsync(multiPayment, useTransaction);
            }
            else
            {
                var isInsert = false;
                var isDelete = false;
                multiPayment = await tableProvider.GetDataAsync(serverData.ID);
                if (multiPayment == null)
                {
                    isInsert = true;
                    multiPayment = new mvMultiPayment();
                }                
                else if (multiPayment.IsDeleted)
                    isDelete = true;                    

                multiPayment.CopyFrom(serverData);
                DbContext.SetSyncData(multiPayment, syncDate, localDate, status, attempts);

                if (isInsert)
                    await tableProvider.InsertDataAsync(multiPayment, useTransaction);
                else if (isDelete)
                    await tableProvider.DeleteDataAsync(multiPayment, useTransaction);
                else
                    await tableProvider.UpdateDataAsync(multiPayment, useTransaction);

                if (obj != null)
                {
                    obj.CopyFrom(serverData);
                    DbContext.CopySyncData(obj, multiPayment);
                }
            }
        }

        private void AssignFromLocalData(mvMultiPayment serverData, mvIncomingAccount incomingAccount)
        {
            if (incomingAccount != null)
            {
                serverData.IncomingAccountCode = incomingAccount.Code;
                serverData.IncomingAccountName = incomingAccount.Name;
                serverData.IncomingAccount = incomingAccount.IncomingAccount;
                serverData.SiteID = incomingAccount.SiteID;
                serverData.SiteCode = incomingAccount.SiteCode;
                serverData.SiteName = incomingAccount.SiteName;
                serverData.Site = incomingAccount.Site;
                serverData.AreaID = incomingAccount.AreaID;
                serverData.AreaCode = incomingAccount.AreaCode;
                serverData.AreaName = incomingAccount.AreaName;
                serverData.Area = incomingAccount.Area;
                serverData.RegionID = incomingAccount.RegionID;
                serverData.RegionCode = incomingAccount.RegionCode;
                serverData.RegionName = incomingAccount.RegionName;
                serverData.Region = incomingAccount.Region;
                serverData.TerritoryID = incomingAccount.TerritoryID;
                serverData.TerritoryCode = incomingAccount.TerritoryCode;
                serverData.TerritoryName = incomingAccount.TerritoryName;
                serverData.Territory = incomingAccount.Territory;
                serverData.CompanyID = incomingAccount.CompanyID;
                serverData.CompanyCode = incomingAccount.CompanyCode;
                serverData.CompanyName = incomingAccount.CompanyName;
                serverData.Company = incomingAccount.Company;
                serverData.SiteDistributionTypeID = incomingAccount.SiteDistributionTypeID;
                serverData.SiteDistributionTypeName = incomingAccount.SiteDistributionTypeName;
                serverData.InstitutionCode = incomingAccount.FinanceInstitutionCode;
                serverData.InstitutionName = incomingAccount.FinanceInstitutionName;
                serverData.Institution = incomingAccount.FinanceInstitution;
                serverData.InstitutionShortName = incomingAccount.FinanceInstitutionShortName;
                serverData.InstitutionTypeID = incomingAccount.FinanceInstitutionTypeID;
                serverData.InstitutionTypeName = incomingAccount.FinanceInstitutionTypeName;
            }
        }

        #endregion

    }

}
