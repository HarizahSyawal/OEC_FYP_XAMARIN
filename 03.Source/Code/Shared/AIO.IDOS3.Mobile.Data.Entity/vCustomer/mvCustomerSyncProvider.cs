// ===================================================================================
// Author        : System
// Created date  : 30 Aug 2020 07:11:01
// Description   : mvCustomerSyncProvider partial class.
//
// Modified by   :
// Modified date :
// Comments      :
//
// NOTE: This file is initially generated by system and can be modified following
//       the requirement.
// ===================================================================================

using AIO.IDOS3.Data.Entity;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;
using Wismapi.Data.Entity;

namespace AIO.IDOS3.Mobile.Data.Entity
{

    public partial class mvCustomerSyncProvider : DataSyncProvider<mvCustomer>
    {

        #region Properties

        public static string Selector = "ID,Code,Name,Customer,SalesmanID,RegisteredDate,TermOfPaymentID,TermOfPaymentName,CreditLimit,PriceGroupID,PriceGroupName,DiscountGroupID,DiscountGroupCode,DiscountGroupName,DiscountGroup,DiscountGroupDescription,DiscountGroupStatusID,DiscountGroupStatusName,BillGroupID,BillGroupCode,BillGroupName,BillGroup,BillGroupHeadID,BillGroupHeadCode,BillGroupHeadName,BillGroupHead,CollectorID,IsCollectedByHeadOffice,CollectedBySiteID,CollectedByAreaID,CollectedByRegionID,CollectedByTerritoryID,CollectedByCompanyID,IsTaxIDAvailable,TaxIDNumber,TaxIDName,ContactPerson,Address1,Address2,Address3,Address,CityID,City,StateProvinceID,StateProvince,CountryID,CountryName,ZipCode,Phone1,Phone2,Phone3,Fax,Email,Longitude,Latitude,BillContactPerson,IsBillAddressSameAsAddress,BillAddress1,BillAddress2,BillAddress3,BillAddress,BillCityID,BillCity,BillStateProvinceID,BillStateProvince,BillCountryID,BillCountryName,BillZipCode,BillPhone1,BillPhone2,BillPhone3,BillFax,BillEmail,BillLongitude,BillLatitude,TaxContactPerson,IsTaxAddressSameAsBillAddress,TaxAddress1,TaxAddress2,TaxAddress3,TaxAddress,TaxCityID,TaxCity,TaxStateProvinceID,TaxStateProvince,TaxCountryID,TaxCountryName,TaxZipCode,TaxPhone1,TaxPhone2,TaxPhone3,TaxFax,TaxEmail,TaxLongitude,TaxLatitude,Category1ID,Category1Code,Category1Name,Category1,Category2ID,Category2Code,Category2Name,Category2,Category3ID,Category3Code,Category3Name,Category3,Category4ID,Category4Code,Category4Name,Category4,Category5ID,Category5Code,Category5Name,Category5,Category6ID,Category6Code,Category6Name,Category6,Category7ID,Category7Code,Category7Name,Category7,Category8ID,Category8Code,Category8Name,Category8,Category9ID,Category9Code,Category9Name,Category9,Category10ID,Category10Code,Category10Name,Category10,SalesRoutePlanWeek1,SalesRoutePlanWeek2,SalesRoutePlanWeek3,SalesRoutePlanWeek4,SalesRoutePlanDay1,SalesRoutePlanDay2,SalesRoutePlanDay3,SalesRoutePlanDay4,SalesRoutePlanDay5,SalesRoutePlanDay6,SalesRoutePlanDay7,CollectionRoutePlanWeek1,CollectionRoutePlanWeek2,CollectionRoutePlanWeek3,CollectionRoutePlanWeek4,CollectionRoutePlanDay1,CollectionRoutePlanDay2,CollectionRoutePlanDay3,CollectionRoutePlanDay4,CollectionRoutePlanDay5,CollectionRoutePlanDay6,CollectionRoutePlanDay7,LatestSalesOrder,LatestSalesOrderReturn,LatestSalesOrderSwap,LatestSalesOrderSample,LatestSalesOrderFOC,Photo,NOOPhoto,ClosedPhoto,StatusID,StatusName,SAPCode,AdditionalInfo1,AdditionalInfo2,AdditionalInfo3,AdditionalInfo4,AdditionalInfo5,AdditionalInfo6,AdditionalInfo7,AdditionalInfo8,AdditionalInfo9,AdditionalInfo10,CreatedDate,ModifiedDate,IsDeleted";

        #endregion

        #region Methods

        private async Task<Expression<Func<mvCustomer, bool>>> GetFilter()
        {
            var salesmanIDs = await DbContext.GetDataTableProvider<mvSalesmanTableProvider>().GetData().Select(p => p.ID).ToListAsync();
            var collectorIDs = await DbContext.GetDataTableProvider<mvCollectorTableProvider>().GetData().Select(p => p.ID).ToListAsync();

            Expression filter = null;
            var type = typeof(mvCustomer);
            var param = Expression.Parameter(type, "param");

            var propSalesmanID = Expression.Property(param, "SalesmanID");
            foreach (var id in salesmanIDs)
            {
                var expr = Expression.MakeBinary(ExpressionType.Equal, propSalesmanID, Expression.Constant(id, type.GetProperty("SalesmanID").PropertyType));
                filter = (filter == null) ? expr : Expression.MakeBinary(ExpressionType.Or, filter, expr);
            }

            var propCollectorID = Expression.Property(param, "CollectorID");
            foreach (var id in collectorIDs)
            {
                var expr = Expression.MakeBinary(ExpressionType.Equal, propCollectorID, Expression.Constant(id, type.GetProperty("CollectorID").PropertyType));
                filter = (filter == null) ? expr : Expression.MakeBinary(ExpressionType.Or, filter, expr);
            }

            var propStatusID = Expression.Property(param, "StatusID");
            var addExpr = Expression.MakeBinary(ExpressionType.Equal, propStatusID, Expression.Constant(1, type.GetProperty("StatusID").PropertyType)); // Active
            filter = (filter == null) ? addExpr : Expression.MakeBinary(ExpressionType.And, filter, addExpr);

            return Expression.Lambda<Func<mvCustomer, bool>>(filter, param);
        }



        protected override Exception OnDownloadAllData(bool continueOnError) { return OnDownloadAllDataAsync(continueOnError).Result; }
        protected override Exception OnUploadAllData(bool continueOnError) { return OnUploadAllDataAsync(continueOnError).Result; }
        protected override Exception OnDownloadData(mvCustomer obj, bool useTransaction) { return OnDownloadDataAsync(obj, useTransaction).Result; }
        protected override Exception OnUploadData(mvCustomer obj, bool useTransaction) { return OnUploadDataAsync(obj, useTransaction).Result; }


        protected override async Task<Exception> OnDownloadAllDataAsync(bool continueOnError)
        {
            Exception exception = null;

            var customerTableProvider = DbContext.GetDataTableProvider<mvCustomerTableProvider>();
            var customerServiceProvider = DataServiceContext.GetDataServiceProvider<mvCustomerServiceProvider>();

            DateTime? syncDate = null;

            List<mvCustomer> serverDataList = null;

            var minSyncDate = (DateTimeOffset?)await customerTableProvider.GetData().MinAsync(p => p.SyncDate);

            for (int i = 0; i < DbContext.SyncMaxAttempts; i++)
            {
                try
                {
                    if (!syncDate.HasValue) syncDate = await DataServiceContext.GetDatabaseServerUtcDateTimeAsync();

                    var query = customerServiceProvider.GetData().AddQueryOption("$select", Selector).Where(await GetFilter());

                    if (minSyncDate.HasValue)
                        query = query.Where(p => (p.CreatedDate > minSyncDate.Value) || ((p.ModifiedDate != null) && (p.ModifiedDate.Value > minSyncDate.Value)));
                    
                    serverDataList = query.ToList();
                    break;
                }
                catch (Exception ex)
                {
                    if (i == (DbContext.SyncMaxAttempts - 1)) exception = ex;
                    else await Task.Delay(DbContext.SyncAttemptDelay);
                }
            }

            if (serverDataList != null)
            {
                if (serverDataList.Count > 0)
                {
                    var salesmans = await DbContext.GetDataTableProvider<mvSalesmanTableProvider>().GetData().ToListAsync();
                    var collectors = await DbContext.GetDataTableProvider<mvCollectorTableProvider>().GetData().ToListAsync();

                    int index = 0;
                    foreach (var serverData in serverDataList)
                    {
                        try
                        {
                            var salesman = salesmans.Where(p => p.ID.Equals(serverData.SalesmanID)).SingleOrDefault();
                            var collector = collectors.Where(p => p.ID.Equals(serverData.CollectorID)).SingleOrDefault();

                            AssignFromLocalData(serverData, salesman, collector);

                            await ProcessLocalData(syncDate, 1, 1, serverData, null, customerTableProvider, true);
                        }
                        catch (Exception ex)
                        {
                            if (!continueOnError)
                            {
                                exception = ex;
                                break;
                            }
                        }

                        index++;
                    }
                }

                await DbContext.UpdateAllSyncDateAsync<mvCustomer>(syncDate.Value);
            }

            return exception;
        }

        protected override async Task<Exception> OnUploadAllDataAsync(bool continueOnError)
        {
            Exception exception = null;

            var customerTableProvider = DbContext.GetDataTableProvider<mvCustomerTableProvider>();
            var customerServiceProvider = DataServiceContext.GetDataServiceProvider<mvCustomerServiceProvider>();

            DateTime? syncDate = null;

            var localDataList = await customerTableProvider.GetData().Where(p => (p.SyncDate == null) && !p.IsDeleted).ToListAsync();

            int index = 0;
            foreach (var obj in localDataList)
            {
                var lastStatus = 1;
                var serverData = new mvCustomer();
                serverData.CopyFrom(obj);

                if (serverData.SyncDate == null)
                    serverData.Code = "";

                for (int i = 0; i < DbContext.SyncMaxAttempts; i++)
                {
                    try
                    {
                        if (!syncDate.HasValue) syncDate = await DataServiceContext.GetDatabaseServerUtcDateTimeAsync();

                        await customerServiceProvider.InsertDataAsync(serverData, true);

                        syncDate = await DataServiceContext.GetDatabaseServerUtcDateTimeAsync();
                        await ProcessLocalData(syncDate, 1, (i + 1), serverData, obj, customerTableProvider, true);
                        break;
                    }
                    catch (Exception ex)
                    {
                        if (i == (DbContext.SyncMaxAttempts - 1))
                        {
                            exception = ex;
                            lastStatus = 0;
                            try { await ProcessLocalData(syncDate, 0, (i + 1), serverData, obj, customerTableProvider, true); } catch (Exception) { }
                        }
                        else
                            await Task.Delay(DbContext.SyncAttemptDelay);
                    }
                }

                if ((lastStatus != 1) && !continueOnError)
                    break;

                index++;
            }

            return exception;
        }


        protected override async Task<Exception> OnDownloadDataAsync(mvCustomer obj, bool useTransaction)
        {
            Exception exception = null;

            var customerTableProvider = DbContext.GetDataTableProvider<mvCustomerTableProvider>();
            var customerServiceProvider = DataServiceContext.GetDataServiceProvider<mvCustomerServiceProvider>();

            DateTime? syncDate = null;
            int status = 1;
            int attempts = 0;

            mvCustomer serverData = null;

            for (int i = 0; i < DbContext.SyncMaxAttempts; i++)
            {
                try
                {
                    if (!syncDate.HasValue) syncDate = await DataServiceContext.GetDatabaseServerUtcDateTimeAsync();

                    serverData = customerServiceProvider.GetData().AddQueryOption("$select", Selector)
                        .Where(p => p.ID.Equals(obj.ID)).SingleOrDefault();
                    break;
                }
                catch (Exception ex)
                {
                    if (i == (DbContext.SyncMaxAttempts - 1)) { exception = ex; status = 0; }
                    else await Task.Delay(DbContext.SyncAttemptDelay);
                }
            }

            await ProcessLocalData(syncDate, status, attempts, serverData, obj, customerTableProvider, useTransaction);

            return exception;
        }

        protected override async Task<Exception> OnUploadDataAsync(mvCustomer obj, bool useTransaction)
        {
            Exception exception = null;

            var customerTableProvider = DbContext.GetDataTableProvider<mvCustomerTableProvider>();
            var customerServiceProvider = DataServiceContext.GetDataServiceProvider<mvCustomerServiceProvider>();

            DateTime? syncDate = null;
            int status = 1;
            int attempts = 0;

            var serverData = new mvCustomer();
            serverData.CopyFrom(obj);

            if (serverData.SyncDate == null)
                serverData.Code = "";

            for (int i = 0; i < DbContext.SyncMaxAttempts; i++)
            {
                try
                {
                    if (!syncDate.HasValue) syncDate = await DataServiceContext.GetDatabaseServerUtcDateTimeAsync();
                    attempts++;

                    await customerServiceProvider.InsertDataAsync(serverData, useTransaction);

                    syncDate = await DataServiceContext.GetDatabaseServerUtcDateTimeAsync();
                    break;
                }
                catch (Exception ex)
                {
                    if (i == (DbContext.SyncMaxAttempts - 1)) { exception = ex; status = 0; }
                    else await Task.Delay(DbContext.SyncAttemptDelay);
                }
            }

            if (serverData != null)
            {
                var salesman = await DbContext.GetDataTableProvider<mvSalesmanTableProvider>().GetDataAsync(serverData.SalesmanID);
                var collector = (serverData.CollectorID.HasValue) ? await DbContext.GetDataTableProvider<mvCollectorTableProvider>().GetDataAsync(serverData.CollectorID) : null;

                AssignFromLocalData(serverData, salesman, collector);
            }

            await ProcessLocalData(syncDate, status, attempts, serverData, obj, customerTableProvider, useTransaction);

            return exception;
        }



        private async Task ProcessLocalData(DateTime? syncDate, int status, int attempts, mvCustomer serverData, mvCustomer obj,
            mvCustomerTableProvider tableProvider, bool useTransaction)
        {
            var localDate = (syncDate.HasValue) ? syncDate.Value : await DbContext.GetDatabaseUtcDateTimeAsync();
            mvCustomer customer = null;

            if (serverData == null)
            {
                customer = new mvCustomer();
                customer.ID = obj.ID;

                await tableProvider.DeleteDataAsync(customer, useTransaction);
            }
            else
            {
                var isInsert = false;
                var isDelete = false;
                customer = await tableProvider.GetDataAsync(serverData.ID);
                if (customer == null)
                {
                    isInsert = true;
                    customer = new mvCustomer();
                }
                else if (customer.IsDeleted)
                    isDelete = true;

                customer.CopyFrom(serverData);
                DbContext.SetSyncData(customer, syncDate, localDate, status, attempts);

                if (isInsert)
                {
                    await tableProvider.InsertDataAsync(customer, useTransaction);

                    await PostProcessLocalData(customer, syncDate, false);
                }
                else if (isDelete)
                {
                    await tableProvider.DeleteDataAsync(customer, useTransaction);

                    await PostProcessLocalData(customer, syncDate, true);
                }
                else
                {
                    await tableProvider.UpdateDataAsync(customer, useTransaction);

                    await PostProcessLocalData(customer, syncDate, false);
                }

                if (obj != null)
                {
                    obj.CopyFrom(serverData);
                    DbContext.CopySyncData(obj, customer);
                }
            }
        }

        private void AssignFromLocalData(mvCustomer serverData, mvSalesman salesman, mvCollector collector)
        {
            if (salesman != null)
            {
                serverData.SalesmanCode = salesman.Code;
                serverData.SalesmanName = salesman.Name;
                serverData.Salesman = salesman.Salesman;
                serverData.WarehouseID = salesman.WarehouseID;
                serverData.WarehouseCode = salesman.WarehouseCode;
                serverData.WarehouseName = salesman.WarehouseName;
                serverData.Warehouse = salesman.Warehouse;
                serverData.SiteID = salesman.SiteID;
                serverData.SiteCode = salesman.SiteCode;
                serverData.SiteName = salesman.SiteName;
                serverData.Site = salesman.Site;
                serverData.AreaID = salesman.AreaID;
                serverData.AreaCode = salesman.AreaCode;
                serverData.AreaName = salesman.AreaName;
                serverData.Area = salesman.Area;
                serverData.RegionID = salesman.RegionID;
                serverData.RegionCode = salesman.RegionCode;
                serverData.RegionName = salesman.RegionName;
                serverData.Region = salesman.Region;
                serverData.TerritoryID = salesman.TerritoryID;
                serverData.TerritoryCode = salesman.TerritoryCode;
                serverData.TerritoryName = salesman.TerritoryName;
                serverData.Territory = salesman.Territory;
                serverData.CompanyID = salesman.CompanyID;
                serverData.CompanyCode = salesman.CompanyCode;
                serverData.CompanyName = salesman.CompanyName;
                serverData.Company = salesman.Company;
                serverData.SiteDistributionTypeID = salesman.SiteDistributionTypeID;
                serverData.SiteDistributionTypeName = salesman.SiteDistributionTypeName;
                serverData.IsSiteProductLotCodeEntryRequired = salesman.IsSiteProductLotCodeEntryRequired;
                serverData.WarehouseTypeID = salesman.WarehouseTypeID;
                serverData.WarehouseTypeName = salesman.WarehouseTypeName;
                serverData.SalesmanGroupID = salesman.GroupID;
                serverData.SalesmanGroupName = salesman.GroupName;
                serverData.SalesmanCategoryID = salesman.CategoryID;
                serverData.SalesmanCategoryName = salesman.CategoryName;
            }

            if (collector != null)
            {
                serverData.CollectorCode = collector.Code;
                serverData.CollectorName = collector.Name;
                serverData.Collector = collector.Collector;
                serverData.IsCollectedByHeadOffice = collector.IsHeadOffice;
                serverData.CollectedBySiteID = collector.SiteID;
                serverData.CollectedBySiteCode = collector.SiteCode;
                serverData.CollectedBySiteName = collector.SiteName;
                serverData.CollectedBySite = collector.Site;
                serverData.CollectedByAreaID = collector.AreaID;
                serverData.CollectedByAreaCode = collector.AreaCode;
                serverData.CollectedByAreaName = collector.AreaName;
                serverData.CollectedByArea = collector.Area;
                serverData.CollectedByRegionID = collector.RegionID;
                serverData.CollectedByRegionCode = collector.RegionCode;
                serverData.CollectedByRegionName = collector.RegionName;
                serverData.CollectedByRegion = collector.Region;
                serverData.CollectedByTerritoryID = collector.TerritoryID;
                serverData.CollectedByTerritoryCode = collector.TerritoryCode;
                serverData.CollectedByTerritoryName = collector.TerritoryName;
                serverData.CollectedByTerritory = collector.Territory;
                serverData.CollectedByCompanyID = collector.CompanyID;
                serverData.CollectedByCompanyCode = collector.CompanyCode;
                serverData.CollectedByCompanyName = collector.CompanyName;
                serverData.CollectedByCompany = collector.Company;
                serverData.CollectedBySiteDistributionTypeID = collector.SiteDistributionTypeID;
                serverData.CollectedBySiteDistributionTypeName = collector.SiteDistributionTypeName;
            }
        }

        private async Task<Exception> PostProcessLocalData(mvCustomer serverData, DateTime? syncDate, bool isDelete)
        {
            Exception exception = null;

            if (serverData != null)
            {
                var salesRoutePlanTableProvider = DbContext.GetDataTableProvider<mvSalesRoutePlanTableProvider>();

                var deletedSalesRoutePlan = await salesRoutePlanTableProvider.GetDataAsync(serverData.ID);

                try
                {
                    if (deletedSalesRoutePlan != null)
                        await salesRoutePlanTableProvider.DeleteDataAsync(deletedSalesRoutePlan);

                    var salesRoutePlan = new mvSalesRoutePlan();

                    salesRoutePlan.CustomerID = serverData.ID;
                    salesRoutePlan.CustomerCode = serverData.Code;
                    salesRoutePlan.CustomerName = serverData.Name;
                    salesRoutePlan.Customer = serverData.Customer;
                    salesRoutePlan.SalesmanID = serverData.SalesmanID;
                    salesRoutePlan.SalesmanCode = serverData.SalesmanCode;
                    salesRoutePlan.SalesmanName = serverData.SalesmanName;
                    salesRoutePlan.Salesman = serverData.Salesman;
                    salesRoutePlan.WarehouseID = serverData.WarehouseID;
                    salesRoutePlan.WarehouseCode = serverData.WarehouseCode;
                    salesRoutePlan.WarehouseName = serverData.WarehouseName;
                    salesRoutePlan.Warehouse = serverData.Warehouse;
                    salesRoutePlan.SiteID = serverData.SiteID;
                    salesRoutePlan.SiteCode = serverData.SiteCode;
                    salesRoutePlan.SiteName = serverData.SiteName;
                    salesRoutePlan.Site = serverData.Site;
                    salesRoutePlan.CompanyID = serverData.CompanyID;
                    salesRoutePlan.CompanyCode = serverData.CompanyCode;
                    salesRoutePlan.CompanyName = serverData.CompanyName;
                    salesRoutePlan.Company = serverData.Company;
                    salesRoutePlan.AreaID = serverData.AreaID;
                    salesRoutePlan.AreaCode = serverData.AreaCode;
                    salesRoutePlan.AreaName = serverData.AreaName;
                    salesRoutePlan.Area = serverData.Area;
                    salesRoutePlan.RegionID = serverData.RegionID;
                    salesRoutePlan.RegionCode = serverData.RegionCode;
                    salesRoutePlan.RegionName = serverData.RegionName;
                    salesRoutePlan.Region = serverData.Region;
                    salesRoutePlan.TerritoryID = serverData.TerritoryID;
                    salesRoutePlan.TerritoryCode = serverData.TerritoryCode;
                    salesRoutePlan.TerritoryName = serverData.TerritoryName;
                    salesRoutePlan.Territory = serverData.Territory;
                    salesRoutePlan.SiteDistributionTypeID = serverData.SiteDistributionTypeID;
                    salesRoutePlan.SiteDistributionTypeName = serverData.SiteDistributionTypeName;
                    salesRoutePlan.IsSiteProductLotCodeEntryRequired = serverData.IsSiteProductLotCodeEntryRequired;
                    salesRoutePlan.WarehouseTypeID = serverData.WarehouseTypeID;
                    salesRoutePlan.WarehouseTypeName = serverData.WarehouseTypeName;
                    salesRoutePlan.CustomerBillGroupID = serverData.BillGroupID;
                    salesRoutePlan.CustomerBillGroupCode = serverData.BillGroupCode;
                    salesRoutePlan.CustomerBillGroupName = serverData.BillGroupName;
                    salesRoutePlan.CustomerBillGroup = serverData.BillGroup;
                    salesRoutePlan.CustomerBillGroupHeadID = serverData.BillGroupHeadID;
                    salesRoutePlan.CustomerBillGroupHeadCode = serverData.BillGroupHeadCode;
                    salesRoutePlan.CustomerBillGroupHeadName = serverData.BillGroupHeadName;
                    salesRoutePlan.CustomerBillGroupHead = serverData.BillGroupHead;
                    salesRoutePlan.CustomerContactPerson = serverData.ContactPerson;
                    salesRoutePlan.CustomerAddress1 = serverData.Address1;
                    salesRoutePlan.CustomerAddress2 = serverData.Address2;
                    salesRoutePlan.CustomerAddress3 = serverData.Address3;
                    salesRoutePlan.CustomerAddress = serverData.Address;
                    salesRoutePlan.CustomerCityID = serverData.CityID;
                    salesRoutePlan.CustomerCity = serverData.City;
                    salesRoutePlan.CustomerStateProvinceID = serverData.StateProvinceID;
                    salesRoutePlan.CustomerStateProvince = serverData.StateProvince;
                    salesRoutePlan.CustomerCountryID = serverData.CountryID;
                    salesRoutePlan.CustomerCountryName = serverData.CountryName;
                    salesRoutePlan.CustomerZipCode = serverData.ZipCode;
                    salesRoutePlan.CustomerPhone1 = serverData.Phone1;
                    salesRoutePlan.CustomerPhone2 = serverData.Phone2;
                    salesRoutePlan.CustomerPhone3 = serverData.Phone3;
                    salesRoutePlan.CustomerFax = serverData.Fax;
                    salesRoutePlan.CustomerEmail = serverData.Email;
                    salesRoutePlan.CustomerLongitude = serverData.Longitude;
                    salesRoutePlan.CustomerLatitude = serverData.Latitude;
                    salesRoutePlan.Week1 = serverData.SalesRoutePlanWeek1.Value;
                    salesRoutePlan.Week2 = serverData.SalesRoutePlanWeek2.Value;
                    salesRoutePlan.Week3 = serverData.SalesRoutePlanWeek3.Value;
                    salesRoutePlan.Week4 = serverData.SalesRoutePlanWeek4.Value;
                    salesRoutePlan.Day1 = serverData.SalesRoutePlanDay1.Value;
                    salesRoutePlan.Day2 = serverData.SalesRoutePlanDay2.Value;
                    salesRoutePlan.Day3 = serverData.SalesRoutePlanDay3.Value;
                    salesRoutePlan.Day4 = serverData.SalesRoutePlanDay4.Value;
                    salesRoutePlan.Day5 = serverData.SalesRoutePlanDay5.Value;
                    salesRoutePlan.Day6 = serverData.SalesRoutePlanDay6.Value;
                    salesRoutePlan.Day7 = serverData.SalesRoutePlanDay7.Value;

                    salesRoutePlan.SyncDate = syncDate;

                    if (!isDelete)
                        await salesRoutePlanTableProvider.InsertDataAsync(salesRoutePlan);
                }
                catch (Exception ex)
                {
                    exception = ex;
                }
            }

            return exception;
        }

        #endregion

    }

}
