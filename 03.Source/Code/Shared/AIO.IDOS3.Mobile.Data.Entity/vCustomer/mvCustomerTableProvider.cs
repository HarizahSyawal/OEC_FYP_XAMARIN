// ===================================================================================
// Author        : System
// Created date  : 30 Aug 2020 07:11:01
// Description   : mvCustomerTableProvider partial class.
//
// Modified by   :
// Modified date :
// Comments      :
//
// NOTE: This file is initially generated by system and can be modified following
//       the requirement.
// ===================================================================================

using Wismapi.Data.Entity;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Linq.Expressions;

namespace AIO.IDOS3.Mobile.Data.Entity
{

    public partial class mvCustomerTableProvider : DataTableProvider<mvCustomer>
    {
                
        #region Methods

        public async Task<List<mvCustomer>> GetDataByCurrentWeekAndDay(MobileDataUtility.RoutePlanType routePlanType, int week, int day)
        {
            Expression filter = null;
            var type = typeof(mvCustomer);
            var param = Expression.Parameter(type, "param");

            switch (routePlanType)
            {
                case MobileDataUtility.RoutePlanType.SalesInRoute:
                case MobileDataUtility.RoutePlanType.SalesOutRoute:
                    var propSalesRoutePlanWeekName = "SalesRoutePlanWeek" + day.ToString();
                    var propSalesRoutePlanWeek = Expression.Property(param, propSalesRoutePlanWeekName);
                    filter = Expression.MakeBinary(ExpressionType.Equal, propSalesRoutePlanWeek, Expression.Constant(true, type.GetProperty(propSalesRoutePlanWeekName).PropertyType));

                    var propSalesRoutePlanDayName = "SalesRoutePlanDay" + day.ToString();
                    var propSalesRoutePlanDay = Expression.Property(param, propSalesRoutePlanDayName);
                    filter = Expression.MakeBinary(ExpressionType.And, filter,
                        Expression.MakeBinary(ExpressionType.Equal, propSalesRoutePlanDay, Expression.Constant(true, type.GetProperty(propSalesRoutePlanDayName).PropertyType)));

                    break;
                case MobileDataUtility.RoutePlanType.CollectionRoute:
                    var propCollectionRoutePlanWeekName = "CollectionRoutePlanWeek" + day.ToString();
                    var propCollectionRoutePlanWeek = Expression.Property(param, propCollectionRoutePlanWeekName);
                    filter = Expression.MakeBinary(ExpressionType.Equal, propCollectionRoutePlanWeek, Expression.Constant(true, type.GetProperty(propCollectionRoutePlanWeekName).PropertyType));

                    var propCollectionRoutePlanDayName = "CollectionRoutePlanDay" + day.ToString();
                    var propCollectionRoutePlanDay = Expression.Property(param, propCollectionRoutePlanDayName);
                    filter = Expression.MakeBinary(ExpressionType.And, filter,
                        Expression.MakeBinary(ExpressionType.Equal, propCollectionRoutePlanDay, Expression.Constant(true, type.GetProperty(propCollectionRoutePlanDayName).PropertyType)));
                    
                    break;
            }

            var lambdaFilter = Expression.Lambda<Func<mvCustomer, bool>>(filter, param);

            return await GetData().Where(lambdaFilter).ToListAsync();
        }

        #endregion

    }

}
