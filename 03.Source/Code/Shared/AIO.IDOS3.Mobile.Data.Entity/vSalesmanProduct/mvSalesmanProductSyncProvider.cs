// ===================================================================================
// Author        : System
// Created date  : 24 Sep 2020 05:15:07
// Description   : mvSalesmanProductSyncProvider partial class.
//
// Modified by   :
// Modified date :
// Comments      :
//
// NOTE: This file is initially generated by system and can be modified following
//       the requirement.
// ===================================================================================

using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;
using Wismapi.Data.Entity;

namespace AIO.IDOS3.Mobile.Data.Entity
{

    public partial class mvSalesmanProductSyncProvider : DataSyncProvider<mvSalesmanProduct>
    {

        #region Properties

        public static string Selector = "SalesmanID,ProductID";

        #endregion

        #region Methods

        private async Task<Expression<Func<mvSalesmanProduct, bool>>> GetFilter()
        {
            var salesmanIDs = await DbContext.GetDataTableProvider<mvSalesmanTableProvider>().GetData().Select(p => p.ID).ToListAsync();

            Expression filter = null;
            var type = typeof(mvSalesmanProduct);
            var param = Expression.Parameter(type, "param");

            var propSalesmanID = Expression.Property(param, "SalesmanID");
            foreach (var id in salesmanIDs)
            {
                var expr = Expression.MakeBinary(ExpressionType.Equal, propSalesmanID, Expression.Constant(id, type.GetProperty("SalesmanID").PropertyType));
                filter = (filter == null) ? expr : Expression.MakeBinary(ExpressionType.Or, filter, expr);
            }

            return Expression.Lambda<Func<mvSalesmanProduct, bool>>(filter, param);
        }



        protected override Exception OnDownloadAllData(bool continueOnError) { return OnDownloadAllDataAsync(continueOnError).Result; }
        protected override Exception OnUploadAllData(bool continueOnError) { return OnUploadAllDataAsync(continueOnError).Result; }
        protected override Exception OnDownloadData(mvSalesmanProduct obj, bool useTransaction) { return OnDownloadDataAsync(obj, useTransaction).Result; }
        protected override Exception OnUploadData(mvSalesmanProduct obj, bool useTransaction) { return OnUploadDataAsync(obj, useTransaction).Result; }


        protected override async Task<Exception> OnDownloadAllDataAsync(bool continueOnError)
        {
            Exception exception = null;

            var salesmanProductTableProvider = DbContext.GetDataTableProvider<mvSalesmanProductTableProvider>();
            var salesmanProductServiceProvider = DataServiceContext.GetDataServiceProvider<mvSalesmanProductServiceProvider>();

            DateTime? syncDate = null;

            List<mvSalesmanProduct> serverDataList = null;

            var minSyncDate = (DateTimeOffset?)await salesmanProductTableProvider.GetData().MinAsync(p => p.SyncDate);

            for (int i = 0; i < DbContext.SyncMaxAttempts; i++)
            {
                try
                {
                    if (!syncDate.HasValue) syncDate = await DataServiceContext.GetDatabaseServerUtcDateTimeAsync();

                    var query = salesmanProductServiceProvider.GetData().AddQueryOption("$select", Selector).Where(await GetFilter());

                    serverDataList = query.ToList();
                    break;
                }
                catch (Exception ex)
                {
                    if (i == (DbContext.SyncMaxAttempts - 1)) exception = ex;
                    else await Task.Delay(DbContext.SyncAttemptDelay);
                }
            }

            if (serverDataList != null)
            {
                if (serverDataList.Count > 0)
                {
                    var salesmans = await DbContext.GetDataTableProvider<mvSalesmanTableProvider>().GetData().ToListAsync();
                    var products = await DbContext.GetDataTableProvider<mvProductTableProvider>().GetData().ToListAsync();
                    
                    int index = 0;
                    foreach (var serverData in serverDataList)
                    {
                        try
                        {
                            var salesman = salesmans.Where(p => p.ID.Equals(serverData.SalesmanID)).SingleOrDefault();
                            var product = products.Where(p => (p.ID == serverData.ProductID)).SingleOrDefault();

                            AssignFromLocalData(serverData, salesman, product);

                            await ProcessLocalData(syncDate, 1, 1, serverData, null, salesmanProductTableProvider, true);
                        }
                        catch (Exception ex)
                        {
                            if (!continueOnError)
                            {
                                exception = ex;
                                break;
                            }
                        }

                        index++;
                    }
                }

                await DbContext.UpdateAllSyncDateAsync<mvSalesmanProduct>(syncDate.Value);
            }

            return exception;
        }

        protected override async Task<Exception> OnUploadAllDataAsync(bool continueOnError)
        {
            Exception exception = new NotImplementedException();

            return await Task.FromResult(exception);
        }


        protected override async Task<Exception> OnDownloadDataAsync(mvSalesmanProduct obj, bool useTransaction)
        {
            Exception exception = null;

            var salesmanProductTableProvider = DbContext.GetDataTableProvider<mvSalesmanProductTableProvider>();
            var salesmanProductServiceProvider = DataServiceContext.GetDataServiceProvider<mvSalesmanProductServiceProvider>();

            DateTime? syncDate = null;
            int status = 1;
            int attempts = 0;

            mvSalesmanProduct serverData = null;

            for (int i = 0; i < DbContext.SyncMaxAttempts; i++)
            {
                try
                {
                    if (!syncDate.HasValue) syncDate = await DataServiceContext.GetDatabaseServerUtcDateTimeAsync();

                    serverData = salesmanProductServiceProvider.GetData().AddQueryOption("$select", Selector)
                        .Where(p => p.SalesmanID.Equals(serverData.SalesmanID) && p.ProductID.Equals(serverData.ProductID)).SingleOrDefault();
                    break;
                }
                catch (Exception ex)
                {
                    if (i == (DbContext.SyncMaxAttempts - 1)) { exception = ex; status = 0; }
                    else await Task.Delay(DbContext.SyncAttemptDelay);
                }
            }

            if (serverData != null)
            {
                var salesman = await DbContext.GetDataTableProvider<mvSalesmanTableProvider>().GetDataAsync(serverData.SalesmanID);
                var product = await DbContext.GetDataTableProvider<mvProductTableProvider>().GetDataAsync(serverData.ProductID);

                AssignFromLocalData(serverData, salesman, product);
            }

            await ProcessLocalData(syncDate, status, attempts, serverData, obj, salesmanProductTableProvider, useTransaction);

            return exception;
        }

        protected override async Task<Exception> OnUploadDataAsync(mvSalesmanProduct obj, bool useTransaction)
        {
            Exception exception = new NotImplementedException();

            return await Task.FromResult(exception);
        }



        private async Task ProcessLocalData(DateTime? syncDate, int status, int attempts, mvSalesmanProduct serverData, mvSalesmanProduct obj,
            mvSalesmanProductTableProvider tableProvider, bool useTransaction)
        {
            var localDate = (syncDate.HasValue) ? syncDate.Value : await DbContext.GetDatabaseUtcDateTimeAsync();
            mvSalesmanProduct salesmanProduct = null;

            if (serverData == null)
            {
                salesmanProduct = new mvSalesmanProduct();
                salesmanProduct.SalesmanID = obj.SalesmanID;
                salesmanProduct.ProductID = obj.ProductID;

                await tableProvider.DeleteDataAsync(salesmanProduct, useTransaction);
            }
            else
            {
                var isInsert = false;
                salesmanProduct = await tableProvider.GetDataAsync(serverData.SalesmanID, serverData.ProductID);
                if (salesmanProduct == null)
                {
                    isInsert = true;
                    salesmanProduct = new mvSalesmanProduct();
                }

                salesmanProduct.CopyFrom(serverData);
                DbContext.SetSyncData(salesmanProduct, syncDate, localDate, status, attempts);

                if (isInsert)
                    await tableProvider.InsertDataAsync(salesmanProduct, useTransaction);
                else
                    await tableProvider.UpdateDataAsync(salesmanProduct, useTransaction);

                if (obj != null)
                {
                    obj.CopyFrom(serverData);
                    DbContext.CopySyncData(obj, salesmanProduct);
                }
            }
        }

        private void AssignFromLocalData(mvSalesmanProduct serverData, mvSalesman salesman, mvProduct product)
        {
            if (salesman != null)
            {
                serverData.SalesmanCode = salesman.Code;
                serverData.SalesmanName = salesman.Name;
                serverData.Salesman = salesman.Salesman;
                serverData.WarehouseID = salesman.WarehouseID;
                serverData.WarehouseCode = salesman.WarehouseCode;
                serverData.WarehouseName = salesman.WarehouseName;
                serverData.Warehouse = salesman.Warehouse;
                serverData.SiteID = salesman.SiteID;
                serverData.SiteCode = salesman.SiteCode;
                serverData.SiteName = salesman.SiteName;
                serverData.Site = salesman.Site;
                serverData.AreaID = salesman.AreaID;
                serverData.AreaCode = salesman.AreaCode;
                serverData.AreaName = salesman.AreaName;
                serverData.Area = salesman.Area;
                serverData.RegionID = salesman.RegionID;
                serverData.RegionCode = salesman.RegionCode;
                serverData.RegionName = salesman.RegionName;
                serverData.Region = salesman.Region;
                serverData.TerritoryID = salesman.TerritoryID;
                serverData.TerritoryCode = salesman.TerritoryCode;
                serverData.TerritoryName = salesman.TerritoryName;
                serverData.Territory = salesman.Territory;
                serverData.CompanyID = salesman.CompanyID;
                serverData.CompanyCode = salesman.CompanyCode;
                serverData.CompanyName = salesman.CompanyName;
                serverData.Company = salesman.Company;
                serverData.SiteDistributionTypeID = salesman.SiteDistributionTypeID;
                serverData.SiteDistributionTypeName = salesman.SiteDistributionTypeName;
                serverData.IsSiteProductLotCodeEntryRequired = salesman.IsSiteProductLotCodeEntryRequired;
                serverData.WarehouseTypeID = salesman.WarehouseTypeID;
                serverData.WarehouseTypeName = salesman.WarehouseTypeName;
                serverData.SalesmanGroupID = salesman.GroupID;
                serverData.SalesmanGroupName = salesman.GroupName;
                serverData.SalesmanCategoryID = salesman.CategoryID;
                serverData.SalesmanCategoryName = salesman.CategoryName;                
            }

            if (product != null)
            {
                serverData.ProductCode = product.Code;
                serverData.ProductName = product.Name;
                serverData.Product = product.Product;
                serverData.ProductBrandID = product.BrandID;
                serverData.ProductBrandCode = product.BrandCode;
                serverData.ProductBrandName = product.BrandName;
                serverData.ProductBrand = product.Brand;
                serverData.ProductShortName = product.ShortName;
                serverData.ProductUOMLID = product.UOMLID;
                serverData.ProductUOMMID = product.UOMMID;
                serverData.ProductUOMSID = product.UOMSID;
                serverData.ProductUOMLName = product.UOMLName;
                serverData.ProductUOMMName = product.UOMMName;
                serverData.ProductUOMSName = product.UOMSName;
                serverData.ProductWeight = product.Weight;
                serverData.ProductDimensionL = product.DimensionL;
                serverData.ProductDimensionW = product.DimensionW;
                serverData.ProductDimensionH = product.DimensionH;
                serverData.ProductConversionL = product.ConversionL;
                serverData.ProductConversionM = product.ConversionM;
                serverData.ProductConversionS = product.ConversionS;
            }
        }

        #endregion

    }

}
