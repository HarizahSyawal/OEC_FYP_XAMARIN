// ===================================================================================
// Author        : System
// Created date  : 30 Aug 2020 07:11:03
// Description   : mvProductPriceSyncProvider partial class.
//
// Modified by   :
// Modified date :
// Comments      :
//
// NOTE: This file is initially generated by system and can be modified following
//       the requirement.
// ===================================================================================

using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Wismapi.Data.Entity;

namespace AIO.IDOS3.Mobile.Data.Entity
{

    public partial class mvProductPriceSyncProvider : DataSyncProvider<mvProductPrice>
    {

        #region Properties

        public static string Selector = "ID,Code,ProductID,ValidDateFrom,ValidDateTo,PriceGroupID,PriceGroupName,GrossPrice,TaxPercentage,Price,StatusID,StatusName,CreatedDate,ModifiedDate,IsDeleted";

        #endregion

        #region Methods

        protected override Exception OnDownloadAllData(bool continueOnError) { return OnDownloadAllDataAsync(continueOnError).Result; }
        protected override Exception OnUploadAllData(bool continueOnError) { return OnUploadAllDataAsync(continueOnError).Result; }
        protected override Exception OnDownloadData(mvProductPrice obj, bool useTransaction) { return OnDownloadDataAsync(obj, useTransaction).Result; }
        protected override Exception OnUploadData(mvProductPrice obj, bool useTransaction) { return OnUploadDataAsync(obj, useTransaction).Result; }


        protected override async Task<Exception> OnDownloadAllDataAsync(bool continueOnError)
        {
            Exception exception = null;

            var productPriceTableProvider = DbContext.GetDataTableProvider<mvProductPriceTableProvider>();
            var productPriceServiceProvider = DataServiceContext.GetDataServiceProvider<mvProductPriceServiceProvider>();

            DateTime? syncDate = null;

            List<mvProductPrice> serverDataList = null;

            var minSyncDate = (DateTimeOffset?)await productPriceTableProvider.GetData().MinAsync(p => p.SyncDate);

            for (int i = 0; i < DbContext.SyncMaxAttempts; i++)
            {
                try
                {
                    if (!syncDate.HasValue) syncDate = await DataServiceContext.GetDatabaseServerUtcDateTimeAsync();

                    var query = (IQueryable<mvProductPrice>)productPriceServiceProvider.GetData().AddQueryOption("$select", Selector);

                    if (minSyncDate.HasValue)
                        query = query.Where(p => (p.CreatedDate > minSyncDate.Value) || ((p.ModifiedDate != null) && (p.ModifiedDate.Value > minSyncDate.Value)));

                    serverDataList = query.ToList();
                    break;
                }
                catch (Exception ex)
                {
                    if (i == (DbContext.SyncMaxAttempts - 1)) exception = ex;
                    else await Task.Delay(DbContext.SyncAttemptDelay);
                }
            }

            if (serverDataList != null)
            {
                if (serverDataList.Count > 0)
                {
                    var products = await DbContext.GetDataTableProvider<mvProductTableProvider>().GetData().ToListAsync();

                    int index = 0;
                    foreach (var serverData in serverDataList)
                    {
                        try
                        {
                            var product = products.Where(p => (p.ID == serverData.ProductID)).SingleOrDefault();

                            AssignFromLocalData(serverData, product);

                            await ProcessLocalData(syncDate, 1, 1, serverData, null, productPriceTableProvider, true);
                        }
                        catch (Exception ex)
                        {
                            if (!continueOnError)
                            {
                                exception = ex;
                                break;
                            }
                        }

                        index++;
                    }
                }

                await DbContext.UpdateAllSyncDateAsync<mvProductPrice>(syncDate.Value);
            }

            return exception;
        }

        protected override async Task<Exception> OnUploadAllDataAsync(bool continueOnError)
        {
            Exception exception = new NotImplementedException();

            return await Task.FromResult(exception);
        }


        protected override async Task<Exception> OnDownloadDataAsync(mvProductPrice obj, bool useTransaction)
        {
            Exception exception = null;

            var productPriceTableProvider = DbContext.GetDataTableProvider<mvProductPriceTableProvider>();
            var productPriceServiceProvider = DataServiceContext.GetDataServiceProvider<mvProductPriceServiceProvider>();

            DateTime? syncDate = null;
            int status = 1;
            int attempts = 0;

            mvProductPrice serverData = null;

            for (int i = 0; i < DbContext.SyncMaxAttempts; i++)
            {
                try
                {
                    if (!syncDate.HasValue) syncDate = await DataServiceContext.GetDatabaseServerUtcDateTimeAsync();

                    serverData = productPriceServiceProvider.GetData().AddQueryOption("$select", Selector)
                        .Where(p => (p.Code.ToLower() == obj.Code.ToLower())).SingleOrDefault();
                    break;
                }
                catch (Exception ex)
                {
                    if (i == (DbContext.SyncMaxAttempts - 1)) { exception = ex; status = 0; }
                    else await Task.Delay(DbContext.SyncAttemptDelay);
                }
            }

            if (serverData != null)
            {
                var product = await DbContext.GetDataTableProvider<mvProductTableProvider>().GetDataAsync(serverData.ProductID);

                AssignFromLocalData(serverData, product);
            }

            await ProcessLocalData(syncDate, status, attempts, serverData, obj, productPriceTableProvider, useTransaction);

            return exception;
        }

        protected override async Task<Exception> OnUploadDataAsync(mvProductPrice obj, bool useTransaction)
        {
            Exception exception = new NotImplementedException();

            return await Task.FromResult(exception);
        }



        private async Task ProcessLocalData(DateTime? syncDate, int status, int attempts, mvProductPrice serverData, mvProductPrice obj,
            mvProductPriceTableProvider tableProvider, bool useTransaction)
        {
            var localDate = (syncDate.HasValue) ? syncDate.Value : await DbContext.GetDatabaseUtcDateTimeAsync();
            mvProductPrice productPrice = null;

            if (serverData == null)
            {
                productPrice = new mvProductPrice();
                productPrice.ID = obj.ID;

                await tableProvider.DeleteDataAsync(productPrice, useTransaction);
            }
            else
            {
                var isInsert = false;
                var isDelete = false;
                productPrice = await tableProvider.GetDataAsync(serverData.ID);
                if (productPrice == null)
                {
                    isInsert = true;
                    productPrice = new mvProductPrice();
                }
                else if (productPrice.IsDeleted)
                    isDelete = true;

                productPrice.CopyFrom(serverData);
                DbContext.SetSyncData(productPrice, syncDate, localDate, status, attempts);

                if (isInsert)
                    await tableProvider.InsertDataAsync(productPrice, useTransaction);
                else if (isDelete)
                    await tableProvider.DeleteDataAsync(productPrice, useTransaction);
                else
                    await tableProvider.UpdateDataAsync(productPrice, useTransaction);

                if (obj != null)
                {
                    obj.CopyFrom(serverData);
                    DbContext.CopySyncData(obj, productPrice);
                }
            }
        }

        private void AssignFromLocalData(mvProductPrice serverData, mvProduct product)
        {
            if (product != null)
            {
                serverData.ProductCode = product.Code;
                serverData.ProductName = product.Name;
                serverData.Product = product.Product;
                serverData.ProductBrandID = product.BrandID;
                serverData.ProductBrandCode = product.BrandCode;
                serverData.ProductBrandName = product.BrandName;
                serverData.ProductBrand = product.Brand;
                serverData.ProductShortName = product.ShortName;
                serverData.ProductUOMLID = product.UOMLID;
                serverData.ProductUOMMID = product.UOMMID;
                serverData.ProductUOMSID = product.UOMSID;
                serverData.ProductUOMLName = product.UOMLName;
                serverData.ProductUOMMName = product.UOMMName;
                serverData.ProductUOMSName = product.UOMSName;
                serverData.ProductWeight = product.Weight;
                serverData.ProductDimensionL = product.DimensionL;
                serverData.ProductDimensionW = product.DimensionW;
                serverData.ProductDimensionH = product.DimensionH;
                serverData.ProductConversionL = product.ConversionL;
                serverData.ProductConversionM = product.ConversionM;
                serverData.ProductConversionS = product.ConversionS;
                serverData.ProductStatusID = product.StatusID;
                serverData.ProductStatusName = product.StatusName;
                serverData.ProductAdditionalInfo1 = product.AdditionalInfo1;
                serverData.ProductAdditionalInfo2 = product.AdditionalInfo2;
                serverData.ProductAdditionalInfo3 = product.AdditionalInfo3;
                serverData.ProductAdditionalInfo4 = product.AdditionalInfo4;
                serverData.ProductAdditionalInfo5 = product.AdditionalInfo5;
                serverData.ProductAdditionalInfo6 = product.AdditionalInfo6;
                serverData.ProductAdditionalInfo7 = product.AdditionalInfo7;
                serverData.ProductAdditionalInfo8 = product.AdditionalInfo8;
                serverData.ProductAdditionalInfo9 = product.AdditionalInfo9;
                serverData.ProductAdditionalInfo10 = product.AdditionalInfo10;
            }
        }

        #endregion

    }

}
