// ===================================================================================
// Author        : System
// Created date  : 30 Aug 2020 07:11:02
// Description   : mvProductSyncProvider partial class.
//
// Modified by   :
// Modified date :
// Comments      :
//
// NOTE: This file is initially generated by system and can be modified following
//       the requirement.
// ===================================================================================

using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Wismapi.Data.Entity;

namespace AIO.IDOS3.Mobile.Data.Entity
{

    public partial class mvProductSyncProvider : DataSyncProvider<mvProduct>
    {

        #region Properties

        public static string Selector = "ID,Code,Name,Product,BrandID,BrandCode,BrandName,Brand,ShortName,UOMLID,UOMLName,UOMMID,UOMMName,UOMSID,UOMSName,Weight,DimensionL,DimensionW,DimensionH,ConversionL,ConversionM,ConversionS,ChangeValidationID,ChangeValidationName,StatusID,StatusName,AdditionalInfo1,AdditionalInfo2,AdditionalInfo3,AdditionalInfo4,AdditionalInfo5,AdditionalInfo6,AdditionalInfo7,AdditionalInfo8,AdditionalInfo9,AdditionalInfo10,CreatedDate,ModifiedDate,IsDeleted";

        #endregion

        #region Methods

        protected override Exception OnDownloadAllData(bool continueOnError) { return OnDownloadAllDataAsync(continueOnError).Result; }
        protected override Exception OnUploadAllData(bool continueOnError) { return OnUploadAllDataAsync(continueOnError).Result; }
        protected override Exception OnDownloadData(mvProduct obj, bool useTransaction) { return OnDownloadDataAsync(obj, useTransaction).Result; }
        protected override Exception OnUploadData(mvProduct obj, bool useTransaction) { return OnUploadDataAsync(obj, useTransaction).Result; }


        protected override async Task<Exception> OnDownloadAllDataAsync(bool continueOnError)
        {
            Exception exception = null;

            var productTableProvider = DbContext.GetDataTableProvider<mvProductTableProvider>();
            var productServiceProvider = DataServiceContext.GetDataServiceProvider<mvProductServiceProvider>();

            DateTime? syncDate = null;

            List<mvProduct> serverDataList = null;

            var minSyncDate = (DateTimeOffset?)await productTableProvider.GetData().MinAsync(p => p.SyncDate);

            for (int i = 0; i < DbContext.SyncMaxAttempts; i++)
            {
                try
                {
                    if (!syncDate.HasValue) syncDate = await DataServiceContext.GetDatabaseServerUtcDateTimeAsync();

                    var query = (IQueryable<mvProduct>)productServiceProvider.GetData().AddQueryOption("$select", Selector);

                    if (minSyncDate.HasValue)
                        query = query.Where(p => (p.CreatedDate > minSyncDate.Value) || ((p.ModifiedDate != null) && (p.ModifiedDate.Value > minSyncDate.Value)));

                    serverDataList = query.ToList();
                    break;
                }
                catch (Exception ex)
                {
                    if (i == (DbContext.SyncMaxAttempts - 1)) exception = ex;
                    else await Task.Delay(DbContext.SyncAttemptDelay);
                }
            }

            if (serverDataList != null)
            {
                int index = 0;
                foreach (var serverData in serverDataList)
                {
                    try
                    {
                        await ProcessLocalData(syncDate, 1, 1, serverData, null, productTableProvider, true);
                    }
                    catch (Exception ex)
                    {
                        if (!continueOnError)
                        {
                            exception = ex;
                            break;
                        }
                    }

                    index++;
                }

                await DbContext.UpdateAllSyncDateAsync<mvProduct>(syncDate.Value);
            }

            return exception;
        }

        protected override async Task<Exception> OnUploadAllDataAsync(bool continueOnError)
        {
            Exception exception = new NotImplementedException();

            return await Task.FromResult(exception);
        }


        protected override async Task<Exception> OnDownloadDataAsync(mvProduct obj, bool useTransaction)
        {
            Exception exception = null;

            var productTableProvider = DbContext.GetDataTableProvider<mvProductTableProvider>();
            var productServiceProvider = DataServiceContext.GetDataServiceProvider<mvProductServiceProvider>();

            DateTime? syncDate = null;
            int status = 1;
            int attempts = 0;

            mvProduct serverData = null;

            for (int i = 0; i < DbContext.SyncMaxAttempts; i++)
            {
                try
                {
                    if (!syncDate.HasValue) syncDate = await DataServiceContext.GetDatabaseServerUtcDateTimeAsync();

                    serverData = productServiceProvider.GetData().AddQueryOption("$select", Selector)
                        .Where(p => (p.Code.ToLower() == obj.Code.ToLower())).SingleOrDefault();
                    break;
                }
                catch (Exception ex)
                {
                    if (i == (DbContext.SyncMaxAttempts - 1)) { exception = ex; status = 0; }
                    else await Task.Delay(DbContext.SyncAttemptDelay);
                }
            }

            await ProcessLocalData(syncDate, status, attempts, serverData, obj, productTableProvider, useTransaction);

            return exception;
        }

        protected override async Task<Exception> OnUploadDataAsync(mvProduct obj, bool useTransaction)
        {
            Exception exception = new NotImplementedException();

            return await Task.FromResult(exception);
        }



        private async Task ProcessLocalData(DateTime? syncDate, int status, int attempts, mvProduct serverData, mvProduct obj,
            mvProductTableProvider tableProvider, bool useTransaction)
        {
            var localDate = (syncDate.HasValue) ? syncDate.Value : await DbContext.GetDatabaseUtcDateTimeAsync();
            mvProduct product = null;

            if (serverData == null)
            {
                product = new mvProduct();
                product.ID = obj.ID;

                await tableProvider.DeleteDataAsync(product, useTransaction);
            }
            else
            {
                var isInsert = false;
                var isDelete = false;
                product = await tableProvider.GetDataAsync(serverData.ID);
                if (product == null)
                {
                    isInsert = true;
                    product = new mvProduct();
                }
                else if (product.IsDeleted)
                    isDelete = true;

                product.CopyFrom(serverData);
                DbContext.SetSyncData(product, syncDate, localDate, status, attempts);

                if (isInsert)
                    await tableProvider.InsertDataAsync(product, useTransaction);
                else if (isDelete)
                    await tableProvider.DeleteDataAsync(product, useTransaction);
                else
                    await tableProvider.UpdateDataAsync(product, useTransaction);

                if (obj != null)
                {
                    obj.CopyFrom(serverData);
                    DbContext.CopySyncData(obj, product);
                }
            }
        }

        #endregion

    }

}
