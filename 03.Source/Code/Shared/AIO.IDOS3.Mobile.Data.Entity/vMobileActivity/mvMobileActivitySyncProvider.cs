// ===================================================================================
// Author        : System
// Created date  : 25 Sep 2020 00:13:25
// Description   : mvMobileActivitySyncProvider partial class.
//
// Modified by   :
// Modified date :
// Comments      :
//
// NOTE: This file is initially generated by system and can be modified following
//       the requirement.
// ===================================================================================

using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;
using Wismapi.Data.Entity;

namespace AIO.IDOS3.Mobile.Data.Entity
{

    public partial class mvMobileActivitySyncProvider : DataSyncProvider<mvMobileActivity>
    {

        #region Properties
        
        public static string Selector = "ID,SalesmanID,CollectorID,ActivityDate,StartTime,StartLocation,StartOdometer,EndTime,EndLocation,EndOdometer,DeviceIMEI,StatusID,StatusName,CreatedDate,ModifiedDate";
        
        #endregion
        
        #region Methods
        
        private async Task<Expression<Func<mvMobileActivity, bool>>> GetFilter()
        {
            await Task.CompletedTask;
            throw new NotImplementedException();
        }
        
        
        
        protected override Exception OnDownloadAllData(bool continueOnError) { return OnDownloadAllDataAsync(continueOnError).Result; }
        protected override Exception OnUploadAllData(bool continueOnError) { return OnUploadAllDataAsync(continueOnError).Result; }
        protected override Exception OnDownloadData(mvMobileActivity obj, bool useTransaction) { return OnDownloadDataAsync(obj, useTransaction).Result; }
        protected override Exception OnUploadData(mvMobileActivity obj, bool useTransaction) { return OnUploadDataAsync(obj, useTransaction).Result; }


        protected override async Task<Exception> OnDownloadAllDataAsync(bool continueOnError)
        {
            Exception exception = null;

            var mobileActivityTableProvider = DbContext.GetDataTableProvider<mvMobileActivityTableProvider>();
            var mobileActivityServiceProvider = DataServiceContext.GetDataServiceProvider<mvMobileActivityServiceProvider>();

            DateTime? syncDate = null;

            List<mvMobileActivity> serverDataList = null;

            var minSyncDate = (DateTimeOffset?)await mobileActivityTableProvider.GetData().MinAsync(p => p.SyncDate);

            for (int i = 0; i < DbContext.SyncMaxAttempts; i++)
            {
                try
                {
                    if (!syncDate.HasValue) syncDate = await DataServiceContext.GetDatabaseServerUtcDateTimeAsync();

                    var query = mobileActivityServiceProvider.GetData().AddQueryOption("$select", Selector).Where(await GetFilter());

                    if (minSyncDate.HasValue)
                        query = query.Where(p => (p.CreatedDate > minSyncDate.Value) || ((p.ModifiedDate != null) && (p.ModifiedDate.Value > minSyncDate.Value)));
                        
                    serverDataList = query.ToList();
                    break;
                }
                catch (Exception ex)
                {
                    if (i == (DbContext.SyncMaxAttempts - 1)) exception = ex;
                    else await Task.Delay(DbContext.SyncAttemptDelay);
                }
            }

            if (serverDataList != null)
            {
                if (serverDataList.Count > 0)
                {
                    var salesmans = await DbContext.GetDataTableProvider<mvSalesmanTableProvider>().GetData().ToListAsync();
                    var collectors = await DbContext.GetDataTableProvider<mvCollectorTableProvider>().GetData().ToListAsync();

                    int index = 0;
                    foreach (var serverData in serverDataList)
                    {
                        try
                        {
                            var salesman = salesmans.Where(p => p.ID.Equals(serverData.SalesmanID)).SingleOrDefault();
                            var collector = collectors.Where(p => p.ID.Equals(serverData.CollectorID)).SingleOrDefault();

                            AssignFromLocalData(serverData, salesman, collector);

                            await ProcessLocalData(syncDate, 1, 1, serverData, null, mobileActivityTableProvider, true);
                        }
                        catch (Exception ex)
                        {
                            if (!continueOnError)
                            {
                                exception = ex;
                                break;
                            }
                        }

                        index++;
                    }
                }
                
                await DbContext.UpdateAllSyncDateAsync<mvMobileActivity>(syncDate.Value);
            }

            return exception;
        }
        
        protected override async Task<Exception> OnUploadAllDataAsync(bool continueOnError)
        {
            Exception exception = null;

            var mobileActivityTableProvider = DbContext.GetDataTableProvider<mvMobileActivityTableProvider>();
            var mobileActivityServiceProvider = DataServiceContext.GetDataServiceProvider<mvMobileActivityServiceProvider>();

            DateTime? syncDate = null;

            var localDataList = await mobileActivityTableProvider.GetData().Where(p => (p.SyncDate == null)).ToListAsync();

            int index = 0;
            foreach (var obj in localDataList)
            {
                var lastStatus = 1;
                var serverData = new mvMobileActivity();
                serverData.CopyFrom(obj);

                for (int i = 0; i < DbContext.SyncMaxAttempts; i++)
                {
                    try
                    {
                        if (!syncDate.HasValue) syncDate = await DataServiceContext.GetDatabaseServerUtcDateTimeAsync();

                        await mobileActivityServiceProvider.InsertDataAsync(serverData, true);
                        
                        syncDate = await DataServiceContext.GetDatabaseServerUtcDateTimeAsync();
                        await ProcessLocalData(syncDate, 1, (i + 1), serverData, obj, mobileActivityTableProvider, true);
                        break;
                    }
                    catch (Exception ex)
                    {
                        if (i == (DbContext.SyncMaxAttempts - 1))
                        {
                            exception = ex;
                            lastStatus = 0;
                            try { await ProcessLocalData(syncDate, 0, (i + 1), serverData, obj, mobileActivityTableProvider, true); } catch (Exception) { }
                        }
                        else
                            await Task.Delay(DbContext.SyncAttemptDelay);
                    }
                }

                if ((lastStatus != 1) && !continueOnError)
                    break;

                index++;
            }

            return exception;
        }


        protected override async Task<Exception> OnDownloadDataAsync(mvMobileActivity obj, bool useTransaction)
        {
            Exception exception = null;

            var mobileActivityTableProvider = DbContext.GetDataTableProvider<mvMobileActivityTableProvider>();
            var mobileActivityServiceProvider = DataServiceContext.GetDataServiceProvider<mvMobileActivityServiceProvider>();

            DateTime? syncDate = null;
            int status = 1;
            int attempts = 0;

            mvMobileActivity serverData = null;

            for (int i = 0; i < DbContext.SyncMaxAttempts; i++)
            {
                try
                {
                    if (!syncDate.HasValue) syncDate = await DataServiceContext.GetDatabaseServerUtcDateTimeAsync();

                    serverData = mobileActivityServiceProvider.GetData().AddQueryOption("$select", Selector)
                        .Where(p => p.ID.Equals(obj.ID)).SingleOrDefault();
                    break;
                }
                catch (Exception ex)
                {
                    if (i == (DbContext.SyncMaxAttempts - 1)) { exception = ex; status = 0; }
                    else await Task.Delay(DbContext.SyncAttemptDelay);
                }
            }

            if (serverData != null)
            {
                var salesman = (serverData.SalesmanID.HasValue) ? await DbContext.GetDataTableProvider<mvSalesmanTableProvider>().GetDataAsync(serverData.SalesmanID) : null;
                var collector = (serverData.CollectorID.HasValue) ? await DbContext.GetDataTableProvider<mvCollectorTableProvider>().GetDataAsync(serverData.CollectorID) : null;

                AssignFromLocalData(serverData, salesman, collector);
            }

            await ProcessLocalData(syncDate, status, attempts, serverData, obj, mobileActivityTableProvider, useTransaction);

            return exception;
        }

        protected override async Task<Exception> OnUploadDataAsync(mvMobileActivity obj, bool useTransaction)
        {
            Exception exception = null;

            var mobileActivityTableProvider = DbContext.GetDataTableProvider<mvMobileActivityTableProvider>();
            var mobileActivityServiceProvider = DataServiceContext.GetDataServiceProvider<mvMobileActivityServiceProvider>();

            DateTime? syncDate = null;
            int status = 1;
            int attempts = 0;

            var serverData = new mvMobileActivity();
            serverData.CopyFrom(obj);

            for (int i = 0; i < DbContext.SyncMaxAttempts; i++)
            {
                try
                {
                    if (!syncDate.HasValue) syncDate = await DataServiceContext.GetDatabaseServerUtcDateTimeAsync();
                    attempts++;

                    await mobileActivityServiceProvider.InsertDataAsync(serverData, useTransaction);
                    
                    syncDate = await DataServiceContext.GetDatabaseServerUtcDateTimeAsync();
                    break;
                }
                catch (Exception ex)
                {
                    if (i == (DbContext.SyncMaxAttempts - 1)) { exception = ex; status = 0; }
                    else await Task.Delay(DbContext.SyncAttemptDelay);
                }
            }

            await ProcessLocalData(syncDate, status, attempts, serverData, obj, mobileActivityTableProvider, useTransaction);

            return exception;
        }



        private async Task ProcessLocalData(DateTime? syncDate, int status, int attempts, mvMobileActivity serverData, mvMobileActivity obj,
            mvMobileActivityTableProvider tableProvider, bool useTransaction)
        {
            var localDate = (syncDate.HasValue) ? syncDate.Value : await DbContext.GetDatabaseUtcDateTimeAsync();
            mvMobileActivity mobileActivity = null;

            if (serverData == null)
            {
                mobileActivity = new mvMobileActivity();
                mobileActivity.ID = obj.ID;

                await tableProvider.DeleteDataAsync(mobileActivity, useTransaction);
            }
            else
            {
                var isInsert = false;
                mobileActivity = await tableProvider.GetDataAsync(serverData.ID);
                if (mobileActivity == null)
                {
                    isInsert = true;
                    mobileActivity = new mvMobileActivity();
                }                

                mobileActivity.CopyFrom(serverData);
                DbContext.SetSyncData(mobileActivity, syncDate, localDate, status, attempts);

                if (isInsert)
                    await tableProvider.InsertDataAsync(mobileActivity, useTransaction);
                else
                    await tableProvider.UpdateDataAsync(mobileActivity, useTransaction);

                if (obj != null)
                {
                    obj.CopyFrom(serverData);
                    DbContext.CopySyncData(obj, mobileActivity);
                }
            }
        }

        private void AssignFromLocalData(mvMobileActivity serverData, mvSalesman salesman, mvCollector collector)
        {
            if (salesman != null)
            {
                serverData.SalesmanCode = salesman.Code;
                serverData.SalesmanName = salesman.Name;
                serverData.Salesman = salesman.Salesman;
                serverData.WarehouseID = salesman.WarehouseID;
                serverData.WarehouseCode = salesman.WarehouseCode;
                serverData.WarehouseName = salesman.WarehouseName;
                serverData.Warehouse = salesman.Warehouse;
                serverData.SiteID = salesman.SiteID;
                serverData.SiteCode = salesman.SiteCode;
                serverData.SiteName = salesman.SiteName;
                serverData.Site = salesman.Site;
                serverData.AreaID = salesman.AreaID;
                serverData.AreaCode = salesman.AreaCode;
                serverData.AreaName = salesman.AreaName;
                serverData.Area = salesman.Area;
                serverData.RegionID = salesman.RegionID;
                serverData.RegionCode = salesman.RegionCode;
                serverData.RegionName = salesman.RegionName;
                serverData.Region = salesman.Region;
                serverData.TerritoryID = salesman.TerritoryID;
                serverData.TerritoryCode = salesman.TerritoryCode;
                serverData.TerritoryName = salesman.TerritoryName;
                serverData.Territory = salesman.Territory;
                serverData.CompanyID = salesman.CompanyID;
                serverData.CompanyCode = salesman.CompanyCode;
                serverData.CompanyName = salesman.CompanyName;
                serverData.Company = salesman.Company;
                serverData.SiteDistributionTypeID = salesman.SiteDistributionTypeID;
                serverData.SiteDistributionTypeName = salesman.SiteDistributionTypeName;
                serverData.IsSiteProductLotCodeEntryRequired = salesman.IsSiteProductLotCodeEntryRequired;
                serverData.WarehouseTypeID = salesman.WarehouseTypeID;
                serverData.WarehouseTypeName = salesman.WarehouseTypeName;
                serverData.SalesmanGroupID = salesman.GroupID;
                serverData.SalesmanGroupName = salesman.GroupName;
                serverData.SalesmanCategoryID = salesman.CategoryID;
                serverData.SalesmanCategoryName = salesman.CategoryName;
            }

            if (collector != null)
            {
                serverData.CollectorCode = collector.Code;
                serverData.CollectorName = collector.Name;
                serverData.Collector = collector.Collector;
                serverData.IsCollectedByHeadOffice = collector.IsHeadOffice;
                serverData.CollectedBySiteID = collector.SiteID;
                serverData.CollectedBySiteCode = collector.SiteCode;
                serverData.CollectedBySiteName = collector.SiteName;
                serverData.CollectedBySite = collector.Site;
                serverData.CollectedByAreaID = collector.AreaID;
                serverData.CollectedByAreaCode = collector.AreaCode;
                serverData.CollectedByAreaName = collector.AreaName;
                serverData.CollectedByArea = collector.Area;
                serverData.CollectedByRegionID = collector.RegionID;
                serverData.CollectedByRegionCode = collector.RegionCode;
                serverData.CollectedByRegionName = collector.RegionName;
                serverData.CollectedByRegion = collector.Region;
                serverData.CollectedByTerritoryID = collector.TerritoryID;
                serverData.CollectedByTerritoryCode = collector.TerritoryCode;
                serverData.CollectedByTerritoryName = collector.TerritoryName;
                serverData.CollectedByTerritory = collector.Territory;
                serverData.CollectedByCompanyID = collector.CompanyID;
                serverData.CollectedByCompanyCode = collector.CompanyCode;
                serverData.CollectedByCompanyName = collector.CompanyName;
                serverData.CollectedByCompany = collector.Company;
                serverData.CollectedBySiteDistributionTypeID = collector.SiteDistributionTypeID;
                serverData.CollectedBySiteDistributionTypeName = collector.SiteDistributionTypeName;
                serverData.IsCollectedBySiteProductLotCodeEntryRequired = collector.IsSiteProductLotCodeEntryRequired;
            }
        }

        #endregion

    }

}
