// ===================================================================================
// Author        : System
// Created date  : 20 Oct 2020 11:50:49
// Description   : mvBillAndReceiptStatementSyncProvider partial class.
//
// Modified by   :
// Modified date :
// Comments      :
//
// NOTE: This file is initially generated by system and can be modified following
//       the requirement.
// ===================================================================================

using AIO.IDOS3.Data.Entity;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;
using Wismapi.Data.Entity;

namespace AIO.IDOS3.Mobile.Data.Entity
{

    public partial class mvBillAndReceiptStatementSyncProvider : DataSyncProvider<mvBillAndReceiptStatement>
    {

        #region Properties
        
        public static string Selector = "DocumentID,DocumentCode,PrevRevisionDocumentID,PrevRevisionDocumentCode,RevisionNumber,TransactionDate,CollectorID,RefCollectorID,PrintCount,LastPrintedDate,DocumentStatusID,DocumentStatusName,PostedDate,CreatedDate,ModifiedDate,ChildDetails";
        public static string Expand = "ChildDetails";

        #endregion

        #region Methods

        private async Task<Expression<Func<mvBillAndReceiptStatement, bool>>> GetFilter()
        {
            var collectorIDs = await DbContext.GetDataTableProvider<mvCollectorTableProvider>().GetData().Select(p => p.ID).ToListAsync();

            if (collectorIDs.Count == 0)
                return (p => false);

            Expression filter = null;
            var type = typeof(mvBillAndReceiptStatement);
            var param = Expression.Parameter(type, "param");

            var propCollectorID = Expression.Property(param, "CollectorID");
            var propRefCollectorID = Expression.Property(param, "RefCollectorID");
            foreach (var id in collectorIDs)
            {
                var expr = Expression.MakeBinary(ExpressionType.And, 
                    Expression.MakeBinary(ExpressionType.Equal, propCollectorID, Expression.Constant(id, type.GetProperty("CollectorID").PropertyType)),
                    Expression.MakeBinary(ExpressionType.Equal, propRefCollectorID, Expression.Constant(null, type.GetProperty("RefCollectorID").PropertyType)));
                filter = (filter == null) ? expr : Expression.MakeBinary(ExpressionType.Or, filter, expr);
            }

            var propDocumentStatusID = Expression.Property(param, "DocumentStatusID");
            var addExpr = Expression.MakeBinary(ExpressionType.Or,
                Expression.MakeBinary(ExpressionType.Equal, propDocumentStatusID, Expression.Constant((int)MainDataUtility.BillAndReceiptStatementDocumentStatus.Submitted, type.GetProperty("DocumentStatusID").PropertyType)),
                Expression.MakeBinary(ExpressionType.Equal, propDocumentStatusID, Expression.Constant((int)MainDataUtility.BillAndReceiptStatementDocumentStatus.Verified, type.GetProperty("DocumentStatusID").PropertyType)));
            addExpr = Expression.MakeBinary(ExpressionType.Or, addExpr,
                Expression.MakeBinary(ExpressionType.Equal, propDocumentStatusID, Expression.Constant((int)MainDataUtility.BillAndReceiptStatementDocumentStatus.Rejected, type.GetProperty("DocumentStatusID").PropertyType)));
            addExpr = Expression.MakeBinary(ExpressionType.Or, addExpr,
                Expression.MakeBinary(ExpressionType.Equal, propDocumentStatusID, Expression.Constant((int)MainDataUtility.BillAndReceiptStatementDocumentStatus.Revised, type.GetProperty("DocumentStatusID").PropertyType)));

            filter = (filter == null) ? addExpr : Expression.MakeBinary(ExpressionType.And, filter, addExpr);

            return Expression.Lambda<Func<mvBillAndReceiptStatement, bool>>(filter, param);
        }
        
        
        
        protected override Exception OnDownloadAllData(bool continueOnError) { return OnDownloadAllDataAsync(continueOnError).Result; }
        protected override Exception OnUploadAllData(bool continueOnError) { return OnUploadAllDataAsync(continueOnError).Result; }
        protected override Exception OnDownloadData(mvBillAndReceiptStatement obj, bool useTransaction) { return OnDownloadDataAsync(obj, useTransaction).Result; }
        protected override Exception OnUploadData(mvBillAndReceiptStatement obj, bool useTransaction) { return OnUploadDataAsync(obj, useTransaction).Result; }


        protected override async Task<Exception> OnDownloadAllDataAsync(bool continueOnError)
        {
            Exception exception = null;

            var billAndReceiptStatementTableProvider = DbContext.GetDataTableProvider<mvBillAndReceiptStatementTableProvider>();
            var billAndReceiptStatementServiceProvider = DataServiceContext.GetDataServiceProvider<mvBillAndReceiptStatementServiceProvider>();

            DateTime? syncDate = null;

            List<mvBillAndReceiptStatement> serverDataList = null;

            var transactionDateOffset = (DateTimeOffset?)DateTime.SpecifyKind(DateTime.Today, DateTimeKind.Utc);

            for (int i = 0; i < DbContext.SyncMaxAttempts; i++)
            {
                try
                {
                    await PreDownloadAllData();

                    if (!syncDate.HasValue) syncDate = await DataServiceContext.GetDatabaseServerUtcDateTimeAsync();

                    var query = billAndReceiptStatementServiceProvider.GetData().AddQueryOption("$select", Selector).AddQueryOption("$expand", Expand).Where(await GetFilter());

                    query = query.Where(p => (p.TransactionDate == transactionDateOffset));

                    serverDataList = query.ToList();
                    break;
                }
                catch (Exception ex)
                {
                    if (i == (DbContext.SyncMaxAttempts - 1)) exception = ex;
                    else await Task.Delay(DbContext.SyncAttemptDelay);
                }
            }

            if (serverDataList != null)
            {
                if (serverDataList.Count > 0)
                {
                    var collectors = await DbContext.GetDataTableProvider<mvCollectorTableProvider>().GetData().ToListAsync();

                    int index = 0;
                    foreach (var serverData in serverDataList)
                    {
                        try
                        {
                            var collector = collectors.Where(p => p.ID.Equals(serverData.CollectorID)).SingleOrDefault();

                            AssignFromLocalData(serverData, collector);

                            await ProcessLocalData(syncDate, 1, 1, serverData, null, billAndReceiptStatementTableProvider, true);
                        }
                        catch (Exception ex)
                        {
                            if (!continueOnError)
                            {
                                exception = ex;
                                break;
                            }
                        }

                        index++;
                    }
                }
                
                await DbContext.UpdateAllSyncDateAsync<mvBillAndReceiptStatement>(syncDate.Value);
            }

            return exception;
        }
        
        protected override async Task<Exception> OnUploadAllDataAsync(bool continueOnError)
        {
            Exception exception = null;

            var billAndReceiptStatementTableProvider = DbContext.GetDataTableProvider<mvBillAndReceiptStatementTableProvider>();
            var billAndReceiptStatementDetailsTableProvider = DbContext.GetDataTableProvider<mvBillAndReceiptStatementDetailsTableProvider>();
            var billAndReceiptStatementServiceProvider = DataServiceContext.GetDataServiceProvider<mvBillAndReceiptStatementServiceProvider>();

            DateTime? syncDate = null;

            var localDataList = await billAndReceiptStatementTableProvider.GetData().Where(p => (p.SyncDate == null)).Include(p => p.ChildDetails).ToListAsync();

            int index = 0;
            foreach (var obj in localDataList)
            {
                var lastStatus = 1;
                var serverData = new mvBillAndReceiptStatement();

                serverData.CopyFrom(obj);
                serverData.ChildDetails = new Collection<mvBillAndReceiptStatementDetails>();
                if (obj.ChildDetails != null)
                {
                    foreach (var details in obj.ChildDetails)
                    {
                        var serverDataDetails = new mvBillAndReceiptStatementDetails();
                        serverDataDetails.CopyFrom(details);

                        serverData.ChildDetails.Add(serverDataDetails);
                    }
                }

                for (int i = 0; i < DbContext.SyncMaxAttempts; i++)
                {
                    try
                    {
                        if (!syncDate.HasValue) syncDate = await DataServiceContext.GetDatabaseServerUtcDateTimeAsync();

                        await billAndReceiptStatementServiceProvider.InsertDataAsync(serverData, true);
                        
                        syncDate = await DataServiceContext.GetDatabaseServerUtcDateTimeAsync();
                        await ProcessLocalData(syncDate, 1, (i + 1), serverData, obj, billAndReceiptStatementTableProvider, true);
                        break;
                    }
                    catch (Exception ex)
                    {
                        if (i == (DbContext.SyncMaxAttempts - 1))
                        {
                            exception = ex;
                            lastStatus = 0;
                            try { await ProcessLocalData(syncDate, 0, (i + 1), serverData, obj, billAndReceiptStatementTableProvider, true); } catch (Exception) { }
                        }
                        else
                            await Task.Delay(DbContext.SyncAttemptDelay);
                    }
                }

                if ((lastStatus != 1) && !continueOnError)
                    break;

                index++;
            }

            return exception;
        }


        protected override async Task<Exception> OnDownloadDataAsync(mvBillAndReceiptStatement obj, bool useTransaction)
        {
            Exception exception = null;

            var billAndReceiptStatementTableProvider = DbContext.GetDataTableProvider<mvBillAndReceiptStatementTableProvider>();
            var billAndReceiptStatementServiceProvider = DataServiceContext.GetDataServiceProvider<mvBillAndReceiptStatementServiceProvider>();

            DateTime? syncDate = null;
            int status = 1;
            int attempts = 0;

            mvBillAndReceiptStatement serverData = null;

            for (int i = 0; i < DbContext.SyncMaxAttempts; i++)
            {
                try
                {
                    if (!syncDate.HasValue) syncDate = await DataServiceContext.GetDatabaseServerUtcDateTimeAsync();

                    serverData = billAndReceiptStatementServiceProvider.GetData().AddQueryOption("$select", Selector).AddQueryOption("$expand", Expand)
                        .Where(p => p.DocumentID.Equals(obj.DocumentID)).SingleOrDefault();
                    break;
                }
                catch (Exception ex)
                {
                    if (i == (DbContext.SyncMaxAttempts - 1)) { exception = ex; status = 0; }
                    else await Task.Delay(DbContext.SyncAttemptDelay);
                }
            }

            if (serverData != null)
            {
                var collector = await DbContext.GetDataTableProvider<mvCollectorTableProvider>().GetDataAsync(serverData.CollectorID);

                AssignFromLocalData(serverData, collector);
            }

            await ProcessLocalData(syncDate, status, attempts, serverData, obj, billAndReceiptStatementTableProvider, useTransaction);

            return exception;
        }

        protected override async Task<Exception> OnUploadDataAsync(mvBillAndReceiptStatement obj, bool useTransaction)
        {
            Exception exception = null;

            var billAndReceiptStatementTableProvider = DbContext.GetDataTableProvider<mvBillAndReceiptStatementTableProvider>();
            var billAndReceiptStatementServiceProvider = DataServiceContext.GetDataServiceProvider<mvBillAndReceiptStatementServiceProvider>();
            
            DateTime? syncDate = null;
            int status = 1;
            int attempts = 0;

            var serverData = new mvBillAndReceiptStatement();
            serverData.CopyFrom(obj);
            serverData.ChildDetails = new Collection<mvBillAndReceiptStatementDetails>();
            if (obj.ChildDetails != null)
            {
                foreach (var details in obj.ChildDetails)
                {
                    var serverDataDetails = new mvBillAndReceiptStatementDetails();
                    serverDataDetails.CopyFrom(details);

                    serverData.ChildDetails.Add(serverDataDetails);
                }
            }

            for (int i = 0; i < DbContext.SyncMaxAttempts; i++)
            {
                try
                {
                    if (!syncDate.HasValue) syncDate = await DataServiceContext.GetDatabaseServerUtcDateTimeAsync();
                    attempts++;

                    await billAndReceiptStatementServiceProvider.InsertDataAsync(serverData, useTransaction);
                    
                    syncDate = await DataServiceContext.GetDatabaseServerUtcDateTimeAsync();
                    break;
                }
                catch (Exception ex)
                {
                    if (i == (DbContext.SyncMaxAttempts - 1)) { exception = ex; status = 0; }
                    else await Task.Delay(DbContext.SyncAttemptDelay);
                }
            }

            await ProcessLocalData(syncDate, status, attempts, serverData, obj, billAndReceiptStatementTableProvider, useTransaction);

            return exception;
        }



        private async Task ProcessLocalData(DateTime? syncDate, int status, int attempts, mvBillAndReceiptStatement serverData, mvBillAndReceiptStatement obj,
            mvBillAndReceiptStatementTableProvider tableProvider, bool useTransaction)
        {
            var localDate = (syncDate.HasValue) ? syncDate.Value : await DbContext.GetDatabaseUtcDateTimeAsync();
            mvBillAndReceiptStatement billAndReceiptStatement = null;

            if (serverData == null)
            {
                billAndReceiptStatement = new mvBillAndReceiptStatement();
                billAndReceiptStatement.DocumentID = obj.DocumentID;

                await tableProvider.DeleteDataAsync(billAndReceiptStatement, useTransaction);
            }
            else
            {
                var isInsert = false;
                billAndReceiptStatement = await tableProvider.GetDataAsync(serverData.DocumentID);
                if (billAndReceiptStatement == null)
                {
                    isInsert = true;
                    billAndReceiptStatement = new mvBillAndReceiptStatement();
                }                

                billAndReceiptStatement.CopyFrom(serverData);
                billAndReceiptStatement.ChildDetails = serverData.ChildDetails;
                DbContext.SetSyncData(billAndReceiptStatement, syncDate, localDate, status, attempts);

                if (isInsert)
                    await tableProvider.InsertDataAsync(billAndReceiptStatement, useTransaction);
                else
                    await tableProvider.UpdateDataAsync(billAndReceiptStatement, useTransaction);

                if (obj != null)
                {
                    obj.CopyFrom(serverData);
                    DbContext.CopySyncData(obj, billAndReceiptStatement);
                }
            }
        }

        private void AssignFromLocalData(mvBillAndReceiptStatement serverData, mvCollector collector)
        {
            if (collector != null)
            {
                serverData.CollectorCode = collector.Code;
                serverData.CollectorName = collector.Name;
                serverData.Collector = collector.Collector;
                serverData.IsCollectedByHeadOffice = collector.IsHeadOffice;
                serverData.CollectedBySiteID = collector.SiteID;
                serverData.CollectedBySiteCode = collector.SiteCode;
                serverData.CollectedBySiteName = collector.SiteName;
                serverData.CollectedBySite = collector.Site;
                serverData.CollectedByAreaID = collector.AreaID;
                serverData.CollectedByAreaCode = collector.AreaCode;
                serverData.CollectedByAreaName = collector.AreaName;
                serverData.CollectedByArea = collector.Area;
                serverData.CollectedByRegionID = collector.RegionID;
                serverData.CollectedByRegionCode = collector.RegionCode;
                serverData.CollectedByRegionName = collector.RegionName;
                serverData.CollectedByRegion = collector.Region;
                serverData.CollectedByTerritoryID = collector.TerritoryID;
                serverData.CollectedByTerritoryCode = collector.TerritoryCode;
                serverData.CollectedByTerritoryName = collector.TerritoryName;
                serverData.CollectedByTerritory = collector.Territory;
                serverData.CollectedByCompanyID = collector.CompanyID;
                serverData.CollectedByCompanyCode = collector.CompanyCode;
                serverData.CollectedByCompanyName = collector.CompanyName;
                serverData.CollectedByCompany = collector.Company;
                serverData.CollectedBySiteDistributionTypeID = collector.SiteDistributionTypeID;
                serverData.CollectedBySiteDistributionTypeName = collector.SiteDistributionTypeName;
            }
        }

        private async Task<Exception> PreDownloadAllData()
        {
            Exception exception = null;

            var billAndReceiptStatementTableProvider = DbContext.GetDataTableProvider<mvBillAndReceiptStatementTableProvider>();

            var transactionDate = DateTime.Today.ToUniversalTime();
            var deletedDataList = await billAndReceiptStatementTableProvider.GetData().Where(p => (p.TransactionDate != transactionDate)).ToListAsync();

            foreach (var data in deletedDataList)
            {
                try
                {
                    await billAndReceiptStatementTableProvider.DeleteDataAsync(data);
                }
                catch (Exception ex)
                {
                    exception = ex;
                    break;
                }

            }

            return exception;
        }

        #endregion

    }

}
