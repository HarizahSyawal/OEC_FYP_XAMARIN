// ===================================================================================
// Author        : System
// Created date  : 03 Sep 2020 02:32:40
// Description   : mvSystemParameterSyncProvider partial class.
//
// Modified by   :
// Modified date :
// Comments      :
//
// NOTE: This file is initially generated by system and can be modified following
//       the requirement.
// ===================================================================================

using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Wismapi.Data.Entity;

namespace AIO.IDOS3.Mobile.Data.Entity
{

    public partial class mvSystemParameterSyncProvider : DataSyncProvider<mvSystemParameter>
    {

        #region Properties
        
        public static string Selector = "ID,Value,ModifiedDate";
        
        #endregion
        
        #region Methods

        protected override Exception OnDownloadAllData(bool continueOnError) { return OnDownloadAllDataAsync(continueOnError).Result; }
        protected override Exception OnUploadAllData(bool continueOnError) { return OnUploadAllDataAsync(continueOnError).Result; }
        protected override Exception OnDownloadData(mvSystemParameter obj, bool useTransaction) { return OnDownloadDataAsync(obj, useTransaction).Result; }
        protected override Exception OnUploadData(mvSystemParameter obj, bool useTransaction) { return OnUploadDataAsync(obj, useTransaction).Result; }


        protected override async Task<Exception> OnDownloadAllDataAsync(bool continueOnError)
        {
            Exception exception = null;

            var systemParameterTableProvider = DbContext.GetDataTableProvider<mvSystemParameterTableProvider>();
            var systemParameterServiceProvider = DataServiceContext.GetDataServiceProvider<mvSystemParameterServiceProvider>();

            DateTime? syncDate = null;

            List<mvSystemParameter> serverDataList = null;

            var minSyncDate = (DateTimeOffset?)await systemParameterTableProvider.GetData().MinAsync(p => p.SyncDate);

            for (int i = 0; i < DbContext.SyncMaxAttempts; i++)
            {
                try
                {
                    if (!syncDate.HasValue) syncDate = await DataServiceContext.GetDatabaseServerUtcDateTimeAsync();

                    var query = (IQueryable<mvSystemParameter>)systemParameterServiceProvider.GetData().AddQueryOption("$select", Selector);

                    serverDataList = query.ToList();
                    break;
                }
                catch (Exception ex)
                {
                    if (i == (DbContext.SyncMaxAttempts - 1)) exception = ex;
                    else await Task.Delay(DbContext.SyncAttemptDelay);
                }
            }

            if (serverDataList != null)
            {
                int index = 0;
                foreach (var serverData in serverDataList)
                {
                    try
                    {
                        await ProcessLocalData(syncDate, 1, 1, serverData, null, systemParameterTableProvider, true);
                    }
                    catch (Exception ex)
                    {
                        if (!continueOnError)
                        {
                            exception = ex;
                            break;
                        }
                    }

                    index++;
                }
                
                await DbContext.UpdateAllSyncDateAsync<mvSystemParameter>(syncDate.Value);
            }

            return exception;
        }
        
        protected override async Task<Exception> OnUploadAllDataAsync(bool continueOnError)
        {
            Exception exception = new NotImplementedException();

            return await Task.FromResult(exception);
        }


        protected override async Task<Exception> OnDownloadDataAsync(mvSystemParameter obj, bool useTransaction)
        {
            Exception exception = null;

            var systemParameterTableProvider = DbContext.GetDataTableProvider<mvSystemParameterTableProvider>();
            var systemParameterServiceProvider = DataServiceContext.GetDataServiceProvider<mvSystemParameterServiceProvider>();

            DateTime? syncDate = null;
            int status = 1;
            int attempts = 0;

            mvSystemParameter serverData = null;

            for (int i = 0; i < DbContext.SyncMaxAttempts; i++)
            {
                try
                {
                    if (!syncDate.HasValue) syncDate = await DataServiceContext.GetDatabaseServerUtcDateTimeAsync();

                    serverData = systemParameterServiceProvider.GetData().AddQueryOption("$select", Selector)
                        .Where(p => p.ID.Equals(obj.ID)).SingleOrDefault();
                    break;
                }
                catch (Exception ex)
                {
                    if (i == (DbContext.SyncMaxAttempts - 1)) { exception = ex; status = 0; }
                    else await Task.Delay(DbContext.SyncAttemptDelay);
                }
            }

            await ProcessLocalData(syncDate, status, attempts, serverData, obj, systemParameterTableProvider, useTransaction);

            return exception;
        }

        protected override async Task<Exception> OnUploadDataAsync(mvSystemParameter obj, bool useTransaction)
        {
            Exception exception = new NotImplementedException();

            return await Task.FromResult(exception);
        }



        private async Task ProcessLocalData(DateTime? syncDate, int status, int attempts, mvSystemParameter serverData, mvSystemParameter obj,
            mvSystemParameterTableProvider tableProvider, bool useTransaction)
        {
            var localDate = (syncDate.HasValue) ? syncDate.Value : await DbContext.GetDatabaseUtcDateTimeAsync();
            mvSystemParameter systemParameter = null;

            if (serverData == null)
            {
                systemParameter = new mvSystemParameter();
                systemParameter.ID = obj.ID;

                await tableProvider.DeleteDataAsync(systemParameter, useTransaction);
            }
            else
            {
                var isInsert = false;
                systemParameter = await tableProvider.GetDataAsync(serverData.ID);
                if (systemParameter == null)
                {
                    isInsert = true;
                    systemParameter = new mvSystemParameter();
                }                

                systemParameter.CopyFrom(serverData);
                DbContext.SetSyncData(systemParameter, syncDate, localDate, status, attempts);

                if (isInsert)
                    await tableProvider.InsertDataAsync(systemParameter, useTransaction);
                else
                    await tableProvider.UpdateDataAsync(systemParameter, useTransaction);

                if (obj != null)
                {
                    obj.CopyFrom(serverData);
                    DbContext.CopySyncData(obj, systemParameter);
                }
            }
        }

        #endregion

    }

}
