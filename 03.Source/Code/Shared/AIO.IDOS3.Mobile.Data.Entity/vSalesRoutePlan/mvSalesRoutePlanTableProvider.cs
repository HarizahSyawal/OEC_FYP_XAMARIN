// ===================================================================================
// Author        : System
// Created date  : 30 Aug 2020 07:11:01
// Description   : mvSalesRoutePlanTableProvider partial class.
//
// Modified by   :
// Modified date :
// Comments      :
//
// NOTE: This file is initially generated by system and can be modified following
//       the requirement.
// ===================================================================================

using Wismapi.Data.Entity;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Linq.Expressions;

namespace AIO.IDOS3.Mobile.Data.Entity
{

    public partial class mvSalesRoutePlanTableProvider : DataTableProvider<mvSalesRoutePlan>
    {
                
        #region Methods

        public async Task<List<Guid>> GetCustomerIDByCurrentWeekAndDay(bool isInRoute, int week, int day)
        {
            Expression filter = null;
            var type = typeof(mvSalesRoutePlan);
            var param = Expression.Parameter(type, "param");

            var propWeekName = "Week" + week.ToString();
            var propWeek = Expression.Property(param, propWeekName);
            filter = Expression.MakeBinary(ExpressionType.Equal, propWeek, Expression.Constant(true, type.GetProperty(propWeekName).PropertyType));

            var propDayName = "Day" + day.ToString();
            var propDay = Expression.Property(param, propDayName);
            filter = Expression.MakeBinary(ExpressionType.And, filter,
                Expression.MakeBinary(ExpressionType.Equal, propDay, Expression.Constant(true, type.GetProperty(propDayName).PropertyType)));

            if (!isInRoute)
                filter = Expression.Not(filter);

            var lambdaFilter = Expression.Lambda<Func<mvSalesRoutePlan, bool>>(filter, param);

            return await GetData().Where(lambdaFilter).Select(p => p.CustomerID).ToListAsync();
        }

        #endregion

    }

}
