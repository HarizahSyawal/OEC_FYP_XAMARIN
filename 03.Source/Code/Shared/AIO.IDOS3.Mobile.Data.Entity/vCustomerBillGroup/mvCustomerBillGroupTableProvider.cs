// ===================================================================================
// Author        : System
// Created date  : 30 Aug 2020 07:11:01
// Description   : mvCustomerBillGroupTableProvider partial class.
//
// Modified by   :
// Modified date :
// Comments      :
//
// NOTE: This file is initially generated by system and can be modified following
//       the requirement.
// ===================================================================================

using Wismapi.Data.Entity;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Linq.Expressions;

namespace AIO.IDOS3.Mobile.Data.Entity
{

    public partial class mvCustomerBillGroupTableProvider : DataTableProvider<mvCustomerBillGroup>
    {
                
        #region Methods

        public async Task<List<mvCustomerBillGroup>> GetDataByCurrentWeekAndDay(int week, int day)
        {
            Expression filter = null;
            var type = typeof(mvCustomerBillGroup);
            var param = Expression.Parameter(type, "param");

            var propCollectionRoutePlanWeekName = "CollectionRoutePlanWeek" + day.ToString();
            var propCollectionRoutePlanWeek = Expression.Property(param, propCollectionRoutePlanWeekName);
            filter = Expression.MakeBinary(ExpressionType.Equal, propCollectionRoutePlanWeek, Expression.Constant(true, type.GetProperty(propCollectionRoutePlanWeekName).PropertyType));

            var propCollectionRoutePlanDayName = "CollectionRoutePlanDay" + day.ToString();
            var propCollectionRoutePlanDay = Expression.Property(param, propCollectionRoutePlanDayName);
            filter = Expression.MakeBinary(ExpressionType.And, filter,
                Expression.MakeBinary(ExpressionType.Equal, propCollectionRoutePlanDay, Expression.Constant(true, type.GetProperty(propCollectionRoutePlanDayName).PropertyType)));

            var lambdaFilter = Expression.Lambda<Func<mvCustomerBillGroup, bool>>(filter, param);

            return await GetData().Where(lambdaFilter).ToListAsync();
        }

        #endregion

    }

}
