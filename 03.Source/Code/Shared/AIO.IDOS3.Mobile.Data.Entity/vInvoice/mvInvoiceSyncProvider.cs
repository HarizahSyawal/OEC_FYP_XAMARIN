// ===================================================================================
// Author        : System
// Created date  : 09 Oct 2020 07:17:55
// Description   : mvInvoiceSyncProvider partial class.
//
// Modified by   :
// Modified date :
// Comments      :
//
// NOTE: This file is initially generated by system and can be modified following
//       the requirement.
// ===================================================================================

using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;
using Wismapi.Data.Entity;

namespace AIO.IDOS3.Mobile.Data.Entity
{

    public partial class mvInvoiceSyncProvider : DataSyncProvider<mvInvoice>
    {

        #region Properties
        
        public static string Selector = "DocumentID,DocumentCode,TransactionDate,RefDocumentID,RefDocumentCode,RefTransactionDate,SalesmanID,WarehouseID,SiteID,AreaID,RegionID,TerritoryID,CompanyID,CustomerID,CustomerBillGroupID,CustomerBillGroupHeadID,CollectorID,IsCollectedByHeadOffice,CollectedBySiteID,CollectedByCompanyID,CollectedByAreaID,CollectedByRegionID,CollectedByTerritoryID,PriceGroupID,DiscountGroupID,TermOfPaymentID,ReferenceNumber,DODocumentID,DODocumentCode,DOTransactionDate,DOShipmentDate,DODeliveredDate,DOPrintCount,DOLastPrintedDate,RawTotalGrossPrice,RawTotalPrice,RawTotalDiscountStrata1Amount,RawTotalDiscountStrata2Amount,RawTotalDiscountStrata3Amount,RawTotalDiscountStrata4Amount,RawTotalDiscountStrata5Amount,RawTotalSpecialDiscountStrata1Amount,RawTotalSpecialDiscountStrata2Amount,RawTotalSpecialDiscountStrata3Amount,RawTotalSpecialDiscountStrata4Amount,RawTotalSpecialDiscountStrata5Amount,RawTotalAddDiscountStrataAmount,RawTotalGrossAmount,RawTotalTaxAmount,RawTotalAmount,TotalGrossPrice,TotalPrice,TotalDiscountStrata1Amount,TotalDiscountStrata2Amount,TotalDiscountStrata3Amount,TotalDiscountStrata4Amount,TotalDiscountStrata5Amount,TotalSpecialDiscountStrata1Amount,TotalSpecialDiscountStrata2Amount,TotalSpecialDiscountStrata3Amount,TotalSpecialDiscountStrata4Amount,TotalSpecialDiscountStrata5Amount,TotalAddDiscountStrataAmount,TotalGrossAmount,TotalTaxAmount,TotalAmount,TotalWeight,TotalDimension,AddDiscountStrataReason,RefPrintCount,RefLastPrintedDate,RefDocumentStatusID,RefDocumentStatusName,RefDocumentStatusReason,RefMobileDocumentCode,RefPostedDate,RefTransactionTypeID,RefTransactionTypeName,DueDate,BARSDocumentID,BARSDocumentCode,BARSTransactionDate,OpnameDocumentID,OpnameDocumentCode,OpnameTransactionDate,PrintCount,LastPrintedDate,DocumentStatusID,DocumentStatusName,PostedDate,ARRawTotalAmount,ARRawPaidAmount,ARRawOutstandingAmount,ARTotalAmount,ARPaidAmount,AROutstandingAmount,ARPendingPaymentAmount,ARPendingOutstandingAmount,ARStatusID,ARStatusName,ARSettledDate,CreatedDate,ModifiedDate";
        
        #endregion
        
        #region Methods
        
        private async Task<Expression<Func<mvInvoice, bool>>> GetFilter()
        {
            await Task.CompletedTask;
            throw new NotImplementedException();
        }
        
        
        
        protected override Exception OnDownloadAllData(bool continueOnError) { return OnDownloadAllDataAsync(continueOnError).Result; }
        protected override Exception OnUploadAllData(bool continueOnError) { return OnUploadAllDataAsync(continueOnError).Result; }
        protected override Exception OnDownloadData(mvInvoice obj, bool useTransaction) { return OnDownloadDataAsync(obj, useTransaction).Result; }
        protected override Exception OnUploadData(mvInvoice obj, bool useTransaction) { return OnUploadDataAsync(obj, useTransaction).Result; }


        protected override async Task<Exception> OnDownloadAllDataAsync(bool continueOnError)
        {
            Exception exception = null;

            var invoiceTableProvider = DbContext.GetDataTableProvider<mvInvoiceTableProvider>();
            var invoiceServiceProvider = DataServiceContext.GetDataServiceProvider<mvInvoiceServiceProvider>();

            DateTime? syncDate = null;

            List<mvInvoice> serverDataList = null;

            var minSyncDate = (DateTimeOffset?)await invoiceTableProvider.GetData().MinAsync(p => p.SyncDate);

            for (int i = 0; i < DbContext.SyncMaxAttempts; i++)
            {
                try
                {
                    if (!syncDate.HasValue) syncDate = await DataServiceContext.GetDatabaseServerUtcDateTimeAsync();

                    var query = invoiceServiceProvider.GetData().AddQueryOption("$select", Selector).Where(await GetFilter());

                    if (minSyncDate.HasValue)
                        query = query.Where(p => (p.CreatedDate > minSyncDate.Value) || ((p.ModifiedDate != null) && (p.ModifiedDate.Value > minSyncDate.Value)));
                        
                    serverDataList = query.ToList();
                    break;
                }
                catch (Exception ex)
                {
                    if (i == (DbContext.SyncMaxAttempts - 1)) exception = ex;
                    else await Task.Delay(DbContext.SyncAttemptDelay);
                }
            }

            if (serverDataList != null)
            {
                int index = 0;
                foreach (var serverData in serverDataList)
                {
                    try
                    {
                        await ProcessLocalData(syncDate, 1, 1, serverData, null, invoiceTableProvider, true);
                    }
                    catch (Exception ex)
                    {
                        if (!continueOnError)
                        {
                            exception = ex;
                            break;
                        }
                    }

                    index++;
                }
                
                await DbContext.UpdateAllSyncDateAsync<mvInvoice>(syncDate.Value);
            }

            return exception;
        }
        
        protected override async Task<Exception> OnUploadAllDataAsync(bool continueOnError)
        {
            Exception exception = null;

            var invoiceTableProvider = DbContext.GetDataTableProvider<mvInvoiceTableProvider>();
            var invoiceServiceProvider = DataServiceContext.GetDataServiceProvider<mvInvoiceServiceProvider>();

            DateTime? syncDate = null;

            var localDataList = await invoiceTableProvider.GetData().Where(p => (p.SyncDate == null)).ToListAsync();

            int index = 0;
            foreach (var obj in localDataList)
            {
                var lastStatus = 1;
                var serverData = new mvInvoice();
                serverData.CopyFrom(obj);

                for (int i = 0; i < DbContext.SyncMaxAttempts; i++)
                {
                    try
                    {
                        if (!syncDate.HasValue) syncDate = await DataServiceContext.GetDatabaseServerUtcDateTimeAsync();

                        await invoiceServiceProvider.InsertDataAsync(serverData, true);
                        
                        syncDate = await DataServiceContext.GetDatabaseServerUtcDateTimeAsync();
                        await ProcessLocalData(syncDate, 1, (i + 1), serverData, obj, invoiceTableProvider, true);
                        break;
                    }
                    catch (Exception ex)
                    {
                        if (i == (DbContext.SyncMaxAttempts - 1))
                        {
                            exception = ex;
                            lastStatus = 0;
                            try { await ProcessLocalData(syncDate, 0, (i + 1), serverData, obj, invoiceTableProvider, true); } catch (Exception) { }
                        }
                        else
                            await Task.Delay(DbContext.SyncAttemptDelay);
                    }
                }

                if ((lastStatus != 1) && !continueOnError)
                    break;

                index++;
            }

            return exception;
        }


        protected override async Task<Exception> OnDownloadDataAsync(mvInvoice obj, bool useTransaction)
        {
            Exception exception = null;

            var invoiceTableProvider = DbContext.GetDataTableProvider<mvInvoiceTableProvider>();
            var invoiceServiceProvider = DataServiceContext.GetDataServiceProvider<mvInvoiceServiceProvider>();

            DateTime? syncDate = null;
            int status = 1;
            int attempts = 0;

            mvInvoice serverData = null;

            for (int i = 0; i < DbContext.SyncMaxAttempts; i++)
            {
                try
                {
                    if (!syncDate.HasValue) syncDate = await DataServiceContext.GetDatabaseServerUtcDateTimeAsync();

                    serverData = invoiceServiceProvider.GetData().AddQueryOption("$select", Selector)
                        .Where(p => p.DocumentID.Equals(obj.DocumentID)).SingleOrDefault();
                    break;
                }
                catch (Exception ex)
                {
                    if (i == (DbContext.SyncMaxAttempts - 1)) { exception = ex; status = 0; }
                    else await Task.Delay(DbContext.SyncAttemptDelay);
                }
            }

            await ProcessLocalData(syncDate, status, attempts, serverData, obj, invoiceTableProvider, useTransaction);

            return exception;
        }

        protected override async Task<Exception> OnUploadDataAsync(mvInvoice obj, bool useTransaction)
        {
            Exception exception = null;

            var invoiceTableProvider = DbContext.GetDataTableProvider<mvInvoiceTableProvider>();
            var invoiceServiceProvider = DataServiceContext.GetDataServiceProvider<mvInvoiceServiceProvider>();

            DateTime? syncDate = null;
            int status = 1;
            int attempts = 0;

            var serverData = new mvInvoice();
            serverData.CopyFrom(obj);

            for (int i = 0; i < DbContext.SyncMaxAttempts; i++)
            {
                try
                {
                    if (!syncDate.HasValue) syncDate = await DataServiceContext.GetDatabaseServerUtcDateTimeAsync();
                    attempts++;

                    await invoiceServiceProvider.InsertDataAsync(serverData, useTransaction);
                    
                    syncDate = await DataServiceContext.GetDatabaseServerUtcDateTimeAsync();
                    break;
                }
                catch (Exception ex)
                {
                    if (i == (DbContext.SyncMaxAttempts - 1)) { exception = ex; status = 0; }
                    else await Task.Delay(DbContext.SyncAttemptDelay);
                }
            }

            await ProcessLocalData(syncDate, status, attempts, serverData, obj, invoiceTableProvider, useTransaction);

            return exception;
        }



        private async Task ProcessLocalData(DateTime? syncDate, int status, int attempts, mvInvoice serverData, mvInvoice obj,
            mvInvoiceTableProvider tableProvider, bool useTransaction)
        {
            var localDate = (syncDate.HasValue) ? syncDate.Value : await DbContext.GetDatabaseUtcDateTimeAsync();
            mvInvoice invoice = null;

            if (serverData == null)
            {
                invoice = new mvInvoice();
                invoice.DocumentID = obj.DocumentID;

                await tableProvider.DeleteDataAsync(invoice, useTransaction);
            }
            else
            {
                var isInsert = false;
                invoice = await tableProvider.GetDataAsync(serverData.DocumentID);
                if (invoice == null)
                {
                    isInsert = true;
                    invoice = new mvInvoice();
                }                

                invoice.CopyFrom(serverData);
                DbContext.SetSyncData(invoice, syncDate, localDate, status, attempts);

                if (isInsert)
                    await tableProvider.InsertDataAsync(invoice, useTransaction);
                else
                    await tableProvider.UpdateDataAsync(invoice, useTransaction);

                if (obj != null)
                {
                    obj.CopyFrom(serverData);
                    DbContext.CopySyncData(obj, invoice);
                }
            }
        }

        #endregion

    }

}
