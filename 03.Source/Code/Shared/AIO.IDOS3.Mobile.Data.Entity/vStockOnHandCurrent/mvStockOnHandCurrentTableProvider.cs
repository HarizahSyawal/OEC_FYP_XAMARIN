// ===================================================================================
// Author        : System
// Created date  : 09 Aug 2020 16:32:37
// Description   : mvStockOnHandCurrentTableProvider partial class.
//
// Modified by   :
// Modified date :
// Comments      :
//
// NOTE: This file is initially generated by system and can be modified following
//       the requirement.
// ===================================================================================

using System.Threading.Tasks;
using Wismapi.Data;
using Wismapi.Data.Entity;

namespace AIO.IDOS3.Mobile.Data.Entity
{

    public partial class mvStockOnHandCurrentTableProvider : DataTableProvider<mvStockOnHandCurrent>
    {
        
        #region Methods

        protected override async Task OnEndInsertDataAsync(EndOperationDataEventArgs<mvStockOnHandCurrent> e)
        {
            if (!e.IsError)
            {
                if (e.Data.ExtendProductLot != null)
                {
                    var extendTableProvider = DbContext.GetDataTableProvider<mvProductLotTableProvider>();

                    await InsertExtend(extendTableProvider, e.Data.ExtendProductLot, e.UseTransaction);
                }                
            }

            await base.OnEndInsertDataAsync(e);
        }

        protected override async Task OnEndUpdateDataAsync(EndOperationDataEventArgs<mvStockOnHandCurrent> e)
        {
            if (!e.IsError)
            {
                if (e.Data.ExtendProductLot != null)
                {
                    var extendTableProvider = DbContext.GetDataTableProvider<mvProductLotTableProvider>();

                    await DeleteExtend(extendTableProvider, e.Data.ExtendProductLot.ID, e.UseTransaction);
                    await InsertExtend(extendTableProvider, e.Data.ExtendProductLot, e.UseTransaction);
                }
            }

            await base.OnEndUpdateDataAsync(e);
        }

        protected override async Task OnBeginDeleteDataAsync(BeginOperationDataEventArgs<mvStockOnHandCurrent> e)
        {
            var extendTableProvider = DbContext.GetDataTableProvider<mvProductLotTableProvider>();

            await DeleteExtend(extendTableProvider, e.Data.ExtendProductLot.ID, e.UseTransaction);

            await base.OnBeginDeleteDataAsync(e);
        }



        private async Task InsertExtend(mvProductLotTableProvider extendTableProvider, mvProductLot extend, bool useTransaction)
        {
            await extendTableProvider.InsertDataAsync(extend, useTransaction);
        }

        private async Task DeleteExtend(mvProductLotTableProvider extendTableProvider, int id, bool useTransaction)
        {
            var extend = extendTableProvider.GetData(id);
            if (extend != null)
                await extendTableProvider.DeleteDataAsync(extend, useTransaction);
        }

        #endregion

    }

}
